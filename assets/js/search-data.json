{
  
    
        "post0": {
            "title": "Mortagascar",
            "content": "Applab: Mortagascar . Play Mortagascar . Mortagascar Plan .",
            "url": "https://nope1013.github.io/firstrepo/week%203/2022/09/12/mortagascar.html",
            "relUrl": "/week%203/2022/09/12/mortagascar.html",
            "date": " ‚Ä¢ Sep 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Creative Performance Task Scrum Board",
            "content": "Ideas for Performance Task: . Guess that song | Matching the song to the artist | Finish the lyric üåü | . Functions we want to include / What we need to learn: . Providing a score | Error message | Implementing an if/else to avoid having to repeat code for correct/incorrect answers | . Rubric Row To do Doing Done Notes . 1, Program Purpose and Function | x | x | x | ¬† | . 2, Data Abstraction | x | x | x | ¬† | . 3, Managing Complexity | x | x | x | ¬† | . 4, Procedural Abstraction | x | x | x | ¬† | . 5, Algorithm Implementation | x | x | x | ¬† | . 6, Testing | x | x | x | ¬† | .",
            "url": "https://nope1013.github.io/firstrepo/performance%20task/2022/09/12/creativeperfscrumboard.html",
            "relUrl": "/performance%20task/2022/09/12/creativeperfscrumboard.html",
            "date": " ‚Ä¢ Sep 12, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Pope On Demand",
            "content": "Noor Grewal . DaFoe . APEL . 19 January 2022 . Pope On-Demand . Making mistakes is a fundamental part of the human experience. Everybody has made a mistake, whether consequential or insignificant, at some point in their life. Thus, making mistakes is easy, but forgiving those mistakes often is not. Alexander Pope, in his long poem An Essay on Criticism, wrote that making mistakes is human, however forgiving those mistakes is ‚Äúdivine.‚Äù Forgiveness does not usually come easy, and is seen by Pope as something holy, something that should not be taken for granted, because it is a second chance. This can be a shot at redemption for the errors that every person makes, but it can also result in horrible consequences when gifted to the wrong person. While I agree with Pope that the divinity of forgiveness for human mistakes can lead to progression when those people who have erred want to contribute to society, some people who make mistakes are beyond saving, and giving them a second chance can have ruinous consequences. . Primarily, second chances can allow people who have a purpose to help society to redeem themselves after making mistakes, and continue to serve society in a beneficial way. Many popular musicians and influencers have been subject to the phenomenon of ‚Äúcancel culture,‚Äù in which their past or present mistakes are exposed to the media world, and their content is essentially boycotted. Examples include artists such as Billie Eilish, Doja Cat, and Lil Nas X, all of whom have been put in the spotlight on social media platforms for harmful or insensitive tweets. These people have made human mistakes like misreading situations or bringing down other people via the internet in their youth, and were given a second chance due to the reach of the music that they make. People are polarized on these issues, therefore some granted the artists the second chance to continue making their music, and all have progressed since then. Billie Eilish has millions of streamers who are touched by her emotional content, and able to relate to her, despite the fact that she has offended people in the past. She was given a second chance. Doja Cat is celebrated for her stage presence and empowering music, despite the fact that she has tweeted slurs in the past. She was given a second chance. Lil Nas X is one of the most popular rappers at the moment, and brings awareness to LGBT rights, despite the fact that he has attacked people online in the past. He was given a second chance. All of these artists made mistakes, were forgiven, and now serve society in positive ways today. Additionally, second chances can serve society by bringing closure to the families of victims of previously unsolved crimes. In many cold cases from before forensic technologies, the Los Angeles Police Department was prone to making mistakes in identifying the victims and perpetrators of vicious murders, taking days to find enough evidence to compile a case. Those days soon became weeks, which became months, which became years, which led to boxes and boxes of cold cases, or unsolved murders. However, when forensic technology was invented, the LAPD was given a second chance at the cases that had physical evidence, and cold cases from decades ago are still being solved today. This is an example of an entire section of our society, the police department, that was given a second chance through science, and which is thus able to serve society better, making less of the mistakes it did in the past. Even influential historical figures such as presidents have made terrible mistakes. George Washington, the first president of the United States, led his troops into a massacre when he gained commanding status. Despite this tragic mistake, he was given a second chance in the American Revolution, and was able to help the country gain independence from British tyranny. This was beneficial because even though his mistake cost lives, Washington the fact that he had made one, and that he was not a deliberate murderer. He had the goal to liberate his country from oppression, and to benefit society, so when he was forgiven, he carried out that original goal without making the same mistake. Second chances, when given to people who want to help society progress, can be extremely beneficial, because these people have the mindset to create positive change. . However, some people do not acknowledge the mistakes that they have made, and should not deserve a second chance because they will simply make those mistakes again. There are thousands of plots of books, movies, and television shows where the hero gives the villain a second chance, only to be double-crossed or to see them make the same ‚Äúmistake.‚Äù A prominent example is in the Marvel show Daredevil, where the main character is a lawyer named Matt Murdock by day, and a crime-fighting vigilante named ‚ÄúDaredevil‚Äù by night. His main enemy is Wilson Fisk, a man who controls almost all of New York through corruption and terror. Fisk goes against Murdock in the law world and the crime world, and makes the mistakes of killing people close to him. When Murdock finally is able to get the upper hand on Fisk, he spares him instead of killing him, offering him forgiveness and a second chance at living a more honest life. Murdock, like Pope, acknowledges that humans make mistakes and that forgiveness is divine. The problem, however, is that Fisk is an example of a person who believes that his mistakes are acceptable actions, and who does not view murder and corruption as bad if it is benefitting him. As a result, Murdock‚Äôs forgiveness enables Fisk to escape prison and continue to corrupt and kill innocent people. When somebody does not wish to benefit society, their mistakes are often unforgivable, as giving them a second chance will only let them make more of these mistakes. Hypothetically, if a rapist was caught, tried, and arrested for their crime, they might serve their time, be on parole, and eventually be offered a second chance at living a morally better life and preventing their mistakes from happening again. If they realized the gravity of their actions and how they were harmful, giving them a second chance could be beneficial, as they may want to prevent others from doing what they did, bettering society. On the other hand, in a situation such as the tragic San Diego murders of Amber Dubois and Chelsea King, if the perpetrator does not believe that their actions are wrong, a second chance is just ruinous. Amber Dubois and Chelsea King were subject to the horrible actions of the same man, and he stated on record (after he was finally caught) that he would have simply kept committing atrocities if he was released from prison. He was an example of someone who should not be granted a second chance, as he sought to hurt society and innocent people, not to better it. When a person has a destructive motive or purpose in life, a second chance will allow them to continue fulfilling that purpose and making the same mistakes. . Forgiveness in the form of a second chance is therefore worth granting when the person who has erred is aware of their mistakes, and wants to redeem themselves by helping society progress positively. It is not worth granting to those who have ignoble motives and who do not treat their mistakes as such, because the historical outcome is that they continue to make them, hurting society and its people. While making mistakes is human, forgiving somebody is divine, and forgiveness should thus be granted in the correct situations and treated as something holy. .",
            "url": "https://nope1013.github.io/firstrepo/2022/09/11/Pope-On-Demand.html",
            "relUrl": "/2022/09/11/Pope-On-Demand.html",
            "date": " ‚Ä¢ Sep 11, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Applab Plan",
            "content": "Plan for AppLab . Goals: . A quiz that begins with something fun and then transitions into computer science . | Displaying a score at the end . | Learning more about code functions, connecting this to terms learned in class . | . What I learned: . When text is turned into blocks, it becomes much easier to see what is the code is doing . | ‚Äúconsole.log[message]‚Äù allows the computer to log key functions in a sequence . | Coding can get very very repetitive when you cannot use loop functions, had to do a lot of copy-pasting . | . Things I wish I could do: . I could not figure out how to code a scoring mechanism . | Found an ‚Äúif/else‚Äù block which would have been very effective for wrong/right answers but it was not compatible with the UI controls . | . Things I am proud of: . The background music . | Recognizing data abstraction . | Balancing fun and productivity (both fun and class-oriented questions) . | . Mortagascar Code: . setScreen(‚Äúwelcometomortagascar‚Äù); . playSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù, true); . onEvent(‚Äúarrow‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúArrow Clicked‚Äù); . setScreen(‚Äúmoveit!‚Äù); . }); . onEvent(‚Äúmoveitbutton‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúStart Button Clicked‚Äù); . setScreen(‚Äúquestion1‚Äù); . }); . onEvent(‚Äúking‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúKing Julien Clicked‚Äù); . setScreen(‚Äúcelebrationtime‚Äù); . onEvent(‚Äúcelebrationtime‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúalex‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúmaurice‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúkowalski‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúshark‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚Äúshark Clicked‚Äù); . setScreen(‚Äúcelebrationtime‚Äù); . onEvent(‚Äúcelebrationtime‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . }); . }); . onEvent(‚Äúcat‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúsnake‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúmouse‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúmorton‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúRun Clicked‚Äù); . setScreen(‚Äúq3fr‚Äù); . stopSound(‚ÄúWindows-XP.mp3‚Äù); . }); . onEvent(‚Äúda‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúData Abstraction Clicked‚Äù); . setScreen(‚Äúcorrect‚Äù); . onEvent(‚Äúcorrect‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúid‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúaa‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúbutton3‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúsi‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúYes clicked‚Äù); . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq5‚Äù); . }); . }); . onEvent(‚Äúno‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúNo clicked‚Äù); . setScreen(‚Äúcorrect‚Äù); . onEvent(‚Äúcorrect‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq5‚Äù); . }); . }); . onEvent(‚Äúkhan‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúKhan Academy Clicked‚Äù); . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . }); . onEvent(‚ÄúDropping‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . }); . }); . onEvent(‚Äúnotes‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . }); . }); . onEvent(‚Äúpracq‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . }); . }); .",
            "url": "https://nope1013.github.io/firstrepo/2022/09/11/AppLab-Plan.html",
            "relUrl": "/2022/09/11/AppLab-Plan.html",
            "date": " ‚Ä¢ Sep 11, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Applab Plan (1)",
            "content": "Plan for AppLab . Goals: . A quiz that begins with something fun and then transitions into computer science . | Displaying a score at the end . | Learning more about code functions, connecting this to terms learned in class . | . What I learned: . When text is turned into blocks, it becomes much easier to see what is the code is doing . | ‚Äúconsole.log[message]‚Äù allows the computer to log key functions in a sequence . | Coding can get very very repetitive when you cannot use loop functions, had to do a lot of copy-pasting . | How to use variable functions . | . Things I wish I could do: . Found an ‚Äúif/else‚Äù block which would have been very effective for wrong/right answers but it was not compatible with the UI controls . | . Things I am proud of: . The background music . | Recognizing data abstraction . | Balancing fun and productivity (both fun and class-oriented questions) . | Adding a scoring function after much trial and error . | . Mortagascar Code: . var score = 0; . setScreen(‚Äúwelcometomortagascar‚Äù); . playSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù, true); . onEvent(‚Äúarrow‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúArrow Clicked‚Äù); . setScreen(‚Äúmoveit!‚Äù); . }); . onEvent(‚Äúmoveitbutton‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúStart Button Clicked‚Äù); . setScreen(‚Äúquestion1‚Äù); . }); . onEvent(‚Äúking‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúKing Julien Clicked‚Äù); . score = score + 1; . setScreen(‚Äúcelebrationtime‚Äù); . onEvent(‚Äúcelebrationtime‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúalex‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúmaurice‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúkowalski‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion2‚Äù); . }); . }); . onEvent(‚Äúshark‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚Äúshark Clicked‚Äù); . score = score + 1; . setScreen(‚Äúcelebrationtime‚Äù); . onEvent(‚Äúcelebrationtime‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . }); . }); . onEvent(‚Äúcat‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúsnake‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúmouse‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúwompwomp‚Äù); . onEvent(‚Äúgoback‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúquestion3‚Äù); . playSound(‚ÄúWindows-XP.mp3‚Äù, true); . stopSound(‚Äúhttps://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3‚Äù); . }); . }); . onEvent(‚Äúmorton‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúRun Clicked‚Äù); . setScreen(‚Äúq3fr‚Äù); . stopSound(‚ÄúWindows-XP.mp3‚Äù); . }); . onEvent(‚Äúda‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúData Abstraction Clicked‚Äù); . score = score + 1; . setScreen(‚Äúcorrect‚Äù); . onEvent(‚Äúcorrect‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúid‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúaa‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúbutton3‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq4‚Äù); . }); . }); . onEvent(‚Äúsi‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúYes clicked‚Äù); . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq5‚Äù); . }); . }); . onEvent(‚Äúno‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúNo clicked‚Äù); . score = score + 1; . setScreen(‚Äúcorrect‚Äù); . onEvent(‚Äúcorrect‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúq5‚Äù); . }); . }); . onEvent(‚Äúkhan‚Äù, ‚Äúclick‚Äù, function( ) { . console.log(‚ÄúKhan Academy Clicked‚Äù); . score = score + 1; . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . onEvent(‚Äúres‚Äù, ‚Äúclick‚Äù, function( ) { . setText(‚Äúyayyyy‚Äù, (‚ÄúYour score is‚Äù + score) + ‚Äú/5‚Äù); . }); . }); . onEvent(‚ÄúDropping‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . onEvent(‚Äúres‚Äù, ‚Äúclick‚Äù, function( ) { . setText(‚Äúyayyyy‚Äù, (‚ÄúYour score is‚Äù + score) + ‚Äú/5‚Äù); . }); . }); . }); . onEvent(‚Äúnotes‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . onEvent(‚Äúres‚Äù, ‚Äúclick‚Äù, function( ) { . setText(‚Äúyayyyy‚Äù, (‚ÄúYour score is‚Äù + score) + ‚Äú/5‚Äù); . }); . }); . }); . onEvent(‚Äúpracq‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúerror‚Äù); . onEvent(‚Äúerror‚Äù, ‚Äúclick‚Äù, function( ) { . setScreen(‚Äúmortibrate‚Äù); . playSound(‚Äúsound://category_achievements/melodic_win_10.mp3‚Äù, true); . onEvent(‚Äúres‚Äù, ‚Äúclick‚Äù, function( ) { . setText(‚Äúyayyyy‚Äù, (‚ÄúYour score is‚Äù + score) + ‚Äú/5‚Äù); . }); . }); . }); .",
            "url": "https://nope1013.github.io/firstrepo/2022/09/11/AppLab-Plan-(1).html",
            "relUrl": "/2022/09/11/AppLab-Plan-(1).html",
            "date": " ‚Ä¢ Sep 11, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Changing the theme of my blog",
            "content": "Changing the theme of my blog . Screen captures using the remote theme ‚Äúhacker‚Äù . . . . I noticed that my pages had gone missing, and when I changed it back, the same issue prevailed. After checking with my pair, tablemates, and finally Mr. Mortensen, I realized the error after changing it back was misspelling ‚Äúminima‚Äù as ‚Äúmimima.‚Äù Embarrassing. I learned how to find commit history, however. .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/31/Theme-change.html",
            "relUrl": "/week%202/2022/08/31/Theme-change.html",
            "date": " ‚Ä¢ Aug 31, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Reversing Lists and Dictionaries",
            "content": ". toc: true layout: post categories: [week 2] . title: Reversing Lists and Dictionaries . InfoDb = [] # Append to List a Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;noorkg05@gmail.com&quot;, &quot;Car&quot;: &quot;2012-Mazda CX9&quot;, &quot;Owns Dogs&quot;: [&quot;Luna&quot;, &quot;Kahlua&quot;, &quot;Daisy&quot;], &quot;Owns Cats&quot;: [&quot;Merlot&quot;, &quot;Smeagol&quot;], &quot;Favorite Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - The Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sanika&quot;, &quot;LastName&quot;: &quot;Shahapurkar&quot;, &quot;DOB&quot;: &quot;September 29&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;sanika.shahapurkar@gmail.com&quot;, &quot;Car&quot;: &quot;2018-BMW 430i&quot;, &quot;Owns Dogs&quot;: [&quot;Striver&quot;], &quot;Owns Cats&quot;: [&quot;none:(&quot;], &quot;Favorite Songs&quot;: [&quot;Someone New - Hozier&quot;, &quot;Marvelous - Wallows&quot;, &quot;Saggitarius Superstar - Coin &amp; Faye Webster&quot;] }) InfoDb.reverse() print(&#39;Reversed List:&#39;, InfoDb) # Print the data structure print(InfoDb) . Reversed List: [{&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}] [{&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Dogs: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Dogs&quot;])) print(&quot; t&quot;, &quot;Cats: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Cats&quot;])) print(&quot; t&quot;, &quot;Favorite Songs:&quot;, d_rec[&quot;Favorite Songs&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) print(&#39;Reversed List:&#39;, print_data) for_loop() . Reversed List: &lt;function print_data at 0x7f2be8159c10&gt; For loop output Sanika Shahapurkar Residence: Del Sur Birthday: September 29 Dogs: Striver Cats: none:( Favorite Songs: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;] Noor Grewal Residence: 4S Ranch Birthday: October 27 Dogs: Luna, Kahlua, Daisy Cats: Merlot, Smeagol Favorite Songs: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;] .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/30/listndictreverse.html",
            "relUrl": "/2022/08/30/listndictreverse.html",
            "date": " ‚Ä¢ Aug 30, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Practicing with Lists and Dictionaries",
            "content": ". toc: true layout: post categories: [week 2] . title: Practicing with Lists and Dictionaries . InfoDb = [] # Append to List a Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;4S ranch&quot;, &quot;Email&quot;: &quot;noorkg05@gmail.com&quot;, &quot;Car&quot;: &quot;2012-Mazda CX9&quot;, &quot;Owns Dogs&quot;: [&quot;Luna&quot;, &quot;Kahlua&quot;, &quot;Daisy&quot;], &quot;Owns Cats&quot;: [&quot;Merlot&quot;, &quot;Smeagol&quot;], &quot;Favorite Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - The Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sanika&quot;, &quot;LastName&quot;: &quot;Shahapurkar&quot;, &quot;DOB&quot;: &quot;September 29&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;sanika.shahapurkar@gmail.com&quot;, &quot;Car&quot;: &quot;2018-BMW 430i&quot;, &quot;Owns Dogs&quot;: [&quot;Striver&quot;], &quot;Owns Cats&quot;: [&quot;none:(&quot;], &quot;Favorite Songs&quot;: [&quot;Someone New - Hozier&quot;, &quot;Marvelous - Wallows&quot;, &quot;Saggitarius Superstar - Coin &amp; Faye Webster&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}, {&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Dogs: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Dogs&quot;])) print(&quot; t&quot;, &quot;Cats: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Cats&quot;])) print(&quot; t&quot;, &quot;Favorite Songs:&quot;, d_rec[&quot;Favorite Songs&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Noor Grewal Residence: 4S Ranch Birthday: October 27 Dogs: Luna, Kahlua, Daisy Cats: Merlot, Smeagol Favorite Songs: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;] Sanika Shahapurkar Residence: Del Sur Birthday: September 29 Dogs: Striver Cats: none:( Favorite Songs: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;] .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/30/listndict.html",
            "relUrl": "/2022/08/30/listndict.html",
            "date": " ‚Ä¢ Aug 30, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python Quiz",
            "content": ". toc: true layout: notebook categories: [week 1] . title: Python Quiz . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) questions = 5 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Which fuction turns number into string?&quot;) if rsp == &quot;str()&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Who is the best CS teacher?&quot;) if rsp == &quot;Mr Mortensen&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, nope1013 running /bin/python3 You will be asked 5 questions. Question: Are you ready to take a test? Answer: no Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Which fuction turns number into string? () is incorrect... Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? if is correct! Question: Who is the best CS teacher? if is incorrect... nope1013 you scored 3/5 .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/29/quiz.html",
            "relUrl": "/2022/08/29/quiz.html",
            "date": " ‚Ä¢ Aug 29, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Extremely Fun Calculator",
            "content": "# Addition def add(x, y): return x + y # Subtraction def subtract(x, y): return x - y # Multiplication def multiply(x, y): return x * y # Division def divide(x, y): return x / y print(&quot;Time for everyone&#39;s favorite subject! Select operation.&quot;) print(&quot;1.Add&quot;) print(&quot;2.Subtract&quot;) print(&quot;3.Multiply&quot;) print(&quot;4.Divide&quot;) while True: # take input from the user choice = input(&quot;Tough choice...choose your operation. Don&#39;t sweat it or you&#39;ll regret it! (1/2/3/4): &quot;) # check if choice is one of the four options if choice in (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;): num1 = float(input(&quot;What is your first number?: &quot;)) num2 = float(input(&quot;Enter second number: &quot;)) if choice == &#39;1&#39;: print(num1, &quot;+&quot;, num2, &quot;=&quot;, add(num1, num2)) elif choice == &#39;2&#39;: print(num1, &quot;-&quot;, num2, &quot;=&quot;, subtract(num1, num2)) elif choice == &#39;3&#39;: print(num1, &quot;*&quot;, num2, &quot;=&quot;, multiply(num1, num2)) elif choice == &#39;4&#39;: print(num1, &quot;/&quot;, num2, &quot;=&quot;, divide(num1, num2)) next_calculation = input(&quot;Did you have fun? Want to try another one? (yes/no): &quot;) if next_calculation == &quot;no&quot;: break else: print(&quot;Something went wrong. That&#39;s not fun&quot;) . Time for everyone&#39;s favorite subject! Select operation. 1.Add 2.Subtract 3.Multiply 4.Divide 1534.0 + 4928.0 = 6462.0 9000.0 - 2948.0 = 6052.0 14.0 * 924.0 = 12936.0 900.0 / 30.0 = 30.0 .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/29/calc.html",
            "relUrl": "/week%202/2022/08/29/calc.html",
            "date": " ‚Ä¢ Aug 29, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: Strings, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Noor Grewal&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 17 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Noor Grewal &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Noor Grewal&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Noor Grewal &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;noorg60381@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Mazda cX9&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;noorg60381@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Mazda cX9&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://nope1013.github.io/firstrepo/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " ‚Ä¢ Aug 29, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nope1013.github.io/firstrepo/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " ‚Ä¢ Aug 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Noor's Current Favorite Songs",
            "content": "Noor‚Äôs Current Favorite Songs . . Not ranked in any specific order | Not in any specific category | Constantly subject to change, as music is‚Ä¶ | . . ‚ÄúComedown‚Äù by Bush | ‚ÄúEverlong‚Äù by the Foo Fighters | ‚ÄúTear‚Äù by the Smashing Pumpkins | ‚ÄúTwilight‚Äù by b√¥a | ‚ÄúWasting Love‚Äù by Iron Maiden | ‚ÄúMe and Your Mama‚Äù by Childish Gambino | ‚ÄúShort Change Hero‚Äù by the Heavy | ‚ÄúIt‚Äôs My Life‚Äù by No Doubt | ‚ÄúHail, Hail‚Äù by Pearl Jam | ‚ÄúTime is Running Out‚Äù by Muse |",
            "url": "https://nope1013.github.io/firstrepo/week%200/2022/08/22/CURRENT-FAV-SONGS.html",
            "relUrl": "/week%200/2022/08/22/CURRENT-FAV-SONGS.html",
            "date": " ‚Ä¢ Aug 22, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Original Notebook",
            "content": "print(&#39;Hello Mr M!!!&#39;) . Hello Mr M!!! .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/22/new-nb.html",
            "relUrl": "/week%202/2022/08/22/new-nb.html",
            "date": " ‚Ä¢ Aug 22, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of the capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.‚Ü© . 2. This is the other footnote. You can even have a link!‚Ü© .",
            "url": "https://nope1013.github.io/firstrepo/week%200/2020/02/20/test.html",
            "relUrl": "/week%200/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Trimester 1 - Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint AP Test Prep Career Tech Canvas . 3 | Creative Development | Create Performance Task, How I got a 5! | JavaScript Tutorial, Program Design with AppLab | TBD | . 2 | Data Abstraction | Python Lists and Dictionaries | Agile and Roles, HTML Fragments and Layouts | TBD | . 1 | Introduction to Python | Hello to Python, Reflections on Computer Science | Bash and Checks, Fastpages, Jupyter Notebooks, Markdown, Focus and Habits | Intro Python, Jupyter, Fastpages | . 0 | Tool Setup | Scoring History, Pseudo Code | Tools and Equipment | Tools Setup | .",
          "url": "https://nope1013.github.io/firstrepo/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "Noor Grewal is a senior at Del Norte who loves art, baking, and recently, coding! She hopes to learn more about fastpages 1. üòé . a blogging platform that natively supports Jupyter notebooks in addition to other formats.¬†&#8617; . |",
          "url": "https://nope1013.github.io/firstrepo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "My Gallery",
          "content": "Here are some of my recent art projects! To view more, check out my instagram üé®üñåÔ∏è . . .",
          "url": "https://nope1013.github.io/firstrepo/gallery/",
          "relUrl": "/gallery/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "Vocab Pseudocode Python Definition/Purpose . input | DISPLAY(expression) | print(expression, end=‚Äù ‚Äú) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=‚Äù ‚Äú | . output | a ‚Üê INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a | . selection | IF (expression) | if expression: | run commands in the code block associated with the selection | . iteration expression | a ‚Üê expression REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . list assignment | list ‚Üê [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . first index in list | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start at zero | . last index in list | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . define procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions | . expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . expression does not equal | a ‚â† b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . LINK | - | - | Collegeboard Pseudocode Reference | . Github | - | - | The defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. | . Visual Studio Code | - | - | Allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub | . Jupyter Notebooks | - | - | A document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. (.ipynb | . print | - | print() | Prints a message through Python | . sequence | - | - | Two or more lines of code | . List | - | square brackets [] | A way of grouping data in an ordered sequence, and will be a big part of the requirement for the College Board Create Task project | . Dictionary | - | curly braces {} | A way of grouping data into in key-value relationships | .",
          "url": "https://nope1013.github.io/firstrepo/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://nope1013.github.io/firstrepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}