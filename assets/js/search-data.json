{
  
    
        "post0": {
            "title": "Pope On Demand",
            "content": "Noor Grewal . DaFoe . APEL . 19 January 2022 . Pope On-Demand . Making mistakes is a fundamental part of the human experience. Everybody has made a mistake, whether consequential or insignificant, at some point in their life. Thus, making mistakes is easy, but forgiving those mistakes often is not. Alexander Pope, in his long poem An Essay on Criticism, wrote that making mistakes is human, however forgiving those mistakes is “divine.” Forgiveness does not usually come easy, and is seen by Pope as something holy, something that should not be taken for granted, because it is a second chance. This can be a shot at redemption for the errors that every person makes, but it can also result in horrible consequences when gifted to the wrong person. While I agree with Pope that the divinity of forgiveness for human mistakes can lead to progression when those people who have erred want to contribute to society, some people who make mistakes are beyond saving, and giving them a second chance can have ruinous consequences. . Primarily, second chances can allow people who have a purpose to help society to redeem themselves after making mistakes, and continue to serve society in a beneficial way. Many popular musicians and influencers have been subject to the phenomenon of “cancel culture,” in which their past or present mistakes are exposed to the media world, and their content is essentially boycotted. Examples include artists such as Billie Eilish, Doja Cat, and Lil Nas X, all of whom have been put in the spotlight on social media platforms for harmful or insensitive tweets. These people have made human mistakes like misreading situations or bringing down other people via the internet in their youth, and were given a second chance due to the reach of the music that they make. People are polarized on these issues, therefore some granted the artists the second chance to continue making their music, and all have progressed since then. Billie Eilish has millions of streamers who are touched by her emotional content, and able to relate to her, despite the fact that she has offended people in the past. She was given a second chance. Doja Cat is celebrated for her stage presence and empowering music, despite the fact that she has tweeted slurs in the past. She was given a second chance. Lil Nas X is one of the most popular rappers at the moment, and brings awareness to LGBT rights, despite the fact that he has attacked people online in the past. He was given a second chance. All of these artists made mistakes, were forgiven, and now serve society in positive ways today. Additionally, second chances can serve society by bringing closure to the families of victims of previously unsolved crimes. In many cold cases from before forensic technologies, the Los Angeles Police Department was prone to making mistakes in identifying the victims and perpetrators of vicious murders, taking days to find enough evidence to compile a case. Those days soon became weeks, which became months, which became years, which led to boxes and boxes of cold cases, or unsolved murders. However, when forensic technology was invented, the LAPD was given a second chance at the cases that had physical evidence, and cold cases from decades ago are still being solved today. This is an example of an entire section of our society, the police department, that was given a second chance through science, and which is thus able to serve society better, making less of the mistakes it did in the past. Even influential historical figures such as presidents have made terrible mistakes. George Washington, the first president of the United States, led his troops into a massacre when he gained commanding status. Despite this tragic mistake, he was given a second chance in the American Revolution, and was able to help the country gain independence from British tyranny. This was beneficial because even though his mistake cost lives, Washington the fact that he had made one, and that he was not a deliberate murderer. He had the goal to liberate his country from oppression, and to benefit society, so when he was forgiven, he carried out that original goal without making the same mistake. Second chances, when given to people who want to help society progress, can be extremely beneficial, because these people have the mindset to create positive change. . However, some people do not acknowledge the mistakes that they have made, and should not deserve a second chance because they will simply make those mistakes again. There are thousands of plots of books, movies, and television shows where the hero gives the villain a second chance, only to be double-crossed or to see them make the same “mistake.” A prominent example is in the Marvel show Daredevil, where the main character is a lawyer named Matt Murdock by day, and a crime-fighting vigilante named “Daredevil” by night. His main enemy is Wilson Fisk, a man who controls almost all of New York through corruption and terror. Fisk goes against Murdock in the law world and the crime world, and makes the mistakes of killing people close to him. When Murdock finally is able to get the upper hand on Fisk, he spares him instead of killing him, offering him forgiveness and a second chance at living a more honest life. Murdock, like Pope, acknowledges that humans make mistakes and that forgiveness is divine. The problem, however, is that Fisk is an example of a person who believes that his mistakes are acceptable actions, and who does not view murder and corruption as bad if it is benefitting him. As a result, Murdock’s forgiveness enables Fisk to escape prison and continue to corrupt and kill innocent people. When somebody does not wish to benefit society, their mistakes are often unforgivable, as giving them a second chance will only let them make more of these mistakes. Hypothetically, if a rapist was caught, tried, and arrested for their crime, they might serve their time, be on parole, and eventually be offered a second chance at living a morally better life and preventing their mistakes from happening again. If they realized the gravity of their actions and how they were harmful, giving them a second chance could be beneficial, as they may want to prevent others from doing what they did, bettering society. On the other hand, in a situation such as the tragic San Diego murders of Amber Dubois and Chelsea King, if the perpetrator does not believe that their actions are wrong, a second chance is just ruinous. Amber Dubois and Chelsea King were subject to the horrible actions of the same man, and he stated on record (after he was finally caught) that he would have simply kept committing atrocities if he was released from prison. He was an example of someone who should not be granted a second chance, as he sought to hurt society and innocent people, not to better it. When a person has a destructive motive or purpose in life, a second chance will allow them to continue fulfilling that purpose and making the same mistakes. . Forgiveness in the form of a second chance is therefore worth granting when the person who has erred is aware of their mistakes, and wants to redeem themselves by helping society progress positively. It is not worth granting to those who have ignoble motives and who do not treat their mistakes as such, because the historical outcome is that they continue to make them, hurting society and its people. While making mistakes is human, forgiving somebody is divine, and forgiveness should thus be granted in the correct situations and treated as something holy. .",
            "url": "https://nope1013.github.io/firstrepo/2022/12/04/Pope-On-Demand.html",
            "relUrl": "/2022/12/04/Pope-On-Demand.html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Applab Plan (1)",
            "content": "Plan for AppLab . Goals: . A quiz that begins with something fun and then transitions into computer science . | Displaying a score at the end . | Learning more about code functions, connecting this to terms learned in class . | . What I learned: . When text is turned into blocks, it becomes much easier to see what is the code is doing . | “console.log[message]” allows the computer to log key functions in a sequence . | Coding can get very very repetitive when you cannot use loop functions, had to do a lot of copy-pasting . | How to use variable functions . | . Things I wish I could do: . Found an “if/else” block which would have been very effective for wrong/right answers but it was not compatible with the UI controls . | . Things I am proud of: . The background music . | Recognizing data abstraction . | Balancing fun and productivity (both fun and class-oriented questions) . | Adding a scoring function after much trial and error . | . Mortagascar Code: . var score = 0; . setScreen(“welcometomortagascar”); . playSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”, true); . onEvent(“arrow”, “click”, function( ) { . console.log(“Arrow Clicked”); . setScreen(“moveit!”); . }); . onEvent(“moveitbutton”, “click”, function( ) { . console.log(“Start Button Clicked”); . setScreen(“question1”); . }); . onEvent(“king”, “click”, function( ) { . console.log(“King Julien Clicked”); . score = score + 1; . setScreen(“celebrationtime”); . onEvent(“celebrationtime”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“alex”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“maurice”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“kowalski”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“shark”, “click”, function( ) { . console.log(“shark Clicked”); . score = score + 1; . setScreen(“celebrationtime”); . onEvent(“celebrationtime”, “click”, function( ) { . setScreen(“question3”); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . playSound(“Windows-XP.mp3”, true); . }); . }); . onEvent(“cat”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“snake”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“mouse”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“morton”, “click”, function( ) { . console.log(“Run Clicked”); . setScreen(“q3fr”); . stopSound(“Windows-XP.mp3”); . }); . onEvent(“da”, “click”, function( ) { . console.log(“Data Abstraction Clicked”); . score = score + 1; . setScreen(“correct”); . onEvent(“correct”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“id”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“aa”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“button3”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“si”, “click”, function( ) { . console.log(“Yes clicked”); . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q5”); . }); . }); . onEvent(“no”, “click”, function( ) { . console.log(“No clicked”); . score = score + 1; . setScreen(“correct”); . onEvent(“correct”, “click”, function( ) { . setScreen(“q5”); . }); . }); . onEvent(“khan”, “click”, function( ) { . console.log(“Khan Academy Clicked”); . score = score + 1; . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . onEvent(“Dropping”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); . onEvent(“notes”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); . onEvent(“pracq”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); .",
            "url": "https://nope1013.github.io/firstrepo/2022/12/04/AppLab-Plan-(1).html",
            "relUrl": "/2022/12/04/AppLab-Plan-(1).html",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Sections 5-7 Notes",
            "content": "Unit 3 Sections 5-7 Notes . Vocab . Greater than: &gt; | Less than: &lt; | Greater than or equal to: &gt;= | Less than or equal to: &lt;= | Equal to: == | Not Equal to: != | Boolean expression: A logical statement that is either TRUE or FALSE | Conditional: used to handle conditions in your program. | Nested conditional: an if or if else statement inside another if else statement. | .",
            "url": "https://nope1013.github.io/firstrepo/lesson%20notes/2022/11/30/3.5_3.7notes.html",
            "relUrl": "/lesson%20notes/2022/11/30/3.5_3.7notes.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 1-2 Notes",
            "content": "Unit 3 Sections 1-2 Notes . Variables and Assignments Key Ideas (3.1) . Variables are abstractions within programs which represent a value | Values can be individual data points or a list/collection that contains many data values | Types of data can include numbers, Booleans (true or false), lists, and strings | . Data Abstraction Key Ideas (3.2) . A list is made up of elements organized in a specific order | An element is a unique, individual value in a list | A string differs from a list as it is a sequence of characters rather than elements | Data abstraction uses a list by taking specific data elements from a list and organizing into a whole, less complex representation of the values such as a table | . Python . To define a variable in Python, type in the variable name (one word) and use the = sign to set it equal to its value | Can be defined using numbers, string, list, or boolean | Strings must have quotations “” around it and lists must be surrounded by square brackets [] | THe variable can now be used in functions such as print(‘’) | A dictionary can be created with keys and values in curly brackets {} | Variables can be interchanged with temporary variables (temp function) | They can also be defined with float data type which is used the same as integer | . Homework and Challenge Problem . Click here for homework and challenge .",
            "url": "https://nope1013.github.io/firstrepo/lesson%20notes/2022/11/30/3.1_3.2notes.html",
            "relUrl": "/lesson%20notes/2022/11/30/3.1_3.2notes.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Homework",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) .",
            "url": "https://nope1013.github.io/firstrepo/week%2013/2022/11/30/homework.html",
            "relUrl": "/week%2013/2022/11/30/homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Challenge and Homework",
            "content": "Challenge . The list given contains multiple numbers with different values. There are also 2 variables that define the minimum and maximum valid values. Given these variables, output the values that do not fit into the valid range as well as their index values. . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] # list of the different numerical values min_valid = 100 # minimum value max_valid = 200 # maximum value # my work n = 1 print(&quot;This is the list of numerical values that are not within the valid range 100-200, and their position in the list:&quot;) for i in data: if int(i) &gt; max_valid or int(i) &lt; min_valid: print( str(i) + &quot; is at position &quot; + str(n)) n = n + 1 . This is the list of numerical values that are not within the valid range 100-200, and their position in the list: 4 is at position 3 308 is at position 5 5 is at position 7 306 is at position 10 . Homework/Hacks . The list given contains 4 album names - Welcome to my Nightmare, Bad Company, Nightflight, More Mayhem - and each album contains at least 4 songs within another list. Given this, write a block of code that enables users to input in integer values that correspond to the albums and songs - Welcome to my Nightmare is 1, Bad Company is 2, etc. - Then, a sentence is outputted that says Playing ___ based on which song was chosen using the numbers inputted by the user that corresponds to each song. . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] # my work album = input(&#39;enter a number 1-4 to select an album&#39;) song = input(&#39;enter a number that correlates with a song to select it&#39;) print(&quot;now playing: &quot; + str(albums[int(album) - 1][3][int(song) - 1])) . now playing: (3, &#39;The Black Widow&#39;) .",
            "url": "https://nope1013.github.io/firstrepo/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "relUrl": "/jupyter/week%2013/2022/11/27/Challenge-and-Homework.html",
            "date": " • Nov 27, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Indexes are a way to count and organize data | Most start at 0 | Collegeboard psuedocode lists start at 1 | Numbers and lists work well for loops | . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList[i] | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x = aList(i) | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i] ← x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1 | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . questions = [ #questions go here (remember to make them strings!) ] def questionloop(): pass #make an iterative function to ask the questions #this can be any loop you want as long as it works! def answercheck(): pass #make a function to check if the answer was correct or not . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[4]) # Now, assign the fourth item in the list to a variable, x and then print the variable x = grocery_list[4] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(1, &quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = &quot;artichokes&quot; print(grocery_list[2]) # Print the entire list, does it match ours ? print(grocery_list) # Expected output # cucumbers # cucumbers # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . cucumbers cucumbers artichokes [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] def binary_convert(binary): pass #use this function to convert every binary value in binarylist to decimal #afterward, get rid of the values that are greater than 100 in decimal #when done, print the results .",
            "url": "https://nope1013.github.io/firstrepo/homework/",
            "relUrl": "/homework/",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Expressions and strings",
            "content": "Vocab . fill in the blanks . the symbol for exponent is ^ the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is * the symbol for division is / the symbol for modulus is % an algorithm is a sequence of steps that performs a specific task . Sequencing Practice . the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1 ? 1 #step 1 value3 = value2 ? 2 #step 2 value4 = value3 ? 6 #step 3 print(value4) . value1 = 5 value2 = value1 / 10 #step 1 value3 = value2 * 2 #step 2 value4 = value3 - 4 #step 3 print(value4) # value 4 is -3 . -3.0 . Selection/Iteration Practice . Create a function to print ONLY the numbers of numlist that are divisble by 3. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for i in numlist: if int(i) % 3 == 0: print( str(i) + &quot; is divisible by 3&quot;) else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation . Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(n): binary = &quot;&quot; while int(n) &gt; 0: binary+=str(int(n%2)) n = n / 2 print(binary[::-1]) # how to reverse string n = int(input(&#39;Enter a number 1-255&#39;)) convert(n) # I input 30 to get the binary 11110 . 11110 . Vocab . fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list Concatenation is combining two strings Length is how many characters are in a string A substring is part of a string Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts . Substring/length practice . string = &quot;hellobye&quot; print(len(string)) print(string[0 : 5]) print(string[5 : 8]) . 8 hello bye . Concatenation practice . string1 = &quot;noor&quot; string2 = &quot;grewal&quot; string3 = string1 + &quot; &quot; + string2 # added a space in between for readability print(string3) . noor grewal . Homework/List Adaptation . create a function that prints the name of each string in the list and the string&#39;s length. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for name in names: print(name + &quot;: length &quot; + str(len(name))) length(names) . jaden: length 5 max: length 3 dylan: length 5 orlando: length 7 .",
            "url": "https://nope1013.github.io/firstrepo/jupyter/week%2013/2022/11/18/hw_challenge.html",
            "relUrl": "/jupyter/week%2013/2022/11/18/hw_challenge.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Tri 1 CB Final",
            "content": "Trimester 1 Collegeboard MC Final . Corrections . Q16 . Incorrect Answer: B . Correction: A, Messages are broken into packets, but they can be received in any order and still be reassembled. Each packet contains data to be transmitted, as well as metadata for routing and reassembling the data upon receipt. This allows the packets to be received in any order and still be reassembled correctly. . Topics to watch videos on: 4.1, skill 5A . Q21 . Incorrect Answer: C . Correction: D, Statement I is true because strings of characters can be represented by sequences of bits. All digital data is represented at the lowest level as sequences of bits. Statement I is true because strings of characters can be represented by sequences of bits. Statement II is true because colors can be encoded as sequences of bits. Statement III is true because sequences of bits can be used to represent sound. . Topics to watch videos on: 2.1, skill 3C . Q22 . Incorrect Answer: D . Correction: C, Binary 1111 is equivalent to 23+22+21+20, or decimal 15. Binary 0011 is equivalent to 21+20, or decimal 3. Binary 0110 is equivalent to 22+21, or decimal 6. Binary 1111 is equivalent to 23+22+21+20, or decimal 15. Decimal 9 is not equivalent to any of the given binary numbers. . Topics to watch videos on: 2.1, skill 2B . Q28 . Incorrect Answer: D . Correction: C, This code incorrectly charges customers who use more than 25 units of electricity. These customers are charged $7 for each of the first 25 units and $5 for each subsequent unit. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. This code segment would incorrectly charge the customer 25 * $7 + 7 * $5 = $210 for the 32 units. If the number of units of electricity used is 25 or less, the cost is 5 times the number of units. Otherwise, the cost is 5 times the first 25 units plus 7 times the number of units above 25. For examples, if a customer used 32 units of electricity, they should be charged $5 for the first 25 and $7 for the additional 7 units (32 – 25 = 7 units), for a total charge of $174. . Topics to watch videos on: 3.6, skill 2B . Q38 . Incorrect Answer: C . Correction: B, This code segment assigns “yarn” to word1, “zebra” to word2, and “xylophone” to word3. The first statement assigns the value of word1 to the temporary variable temp. The second statement assigns the value of word3 to word1. The third statement assigns the original value of word1, which is stored in temp, to word3. The original values of word1 and word3 are interchanged, which reverses the values of the variables as intended. . Topics to watch videos on: 3.3, skill 2B . Q39 . Incorrect Answer: B . Correction: C, Incorrect. While the list elements are strings, the indices of a list are typically nonnegative integers. List indices are typically nonnegative integers. The exam reference sheet describes a list structure whose index values are 1 through the number of elements in the list, inclusive. So, 4 would be considered a valid index. . Topics to watch videos on: 3.2, skill 3A . Night @ The Museum !! . We were extremely happy with the way that our program was functioning, and looked forward to demonstrating it to an audience. . . Several people tried out our program and remarked that it was user friendly. The appearance was enjoyed as well. We could definitely improve the synonyms and grammar syntax to make it even easier. . . Mr. Mortensen tried it out as well, we added “content” just for him… . . This trimester was very productive for coding and I feel that I’ve learned so much. I will miss my scrum team. . .",
            "url": "https://nope1013.github.io/firstrepo/final/2022/11/08/tri1final.html",
            "relUrl": "/final/2022/11/08/tri1final.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Cb Error",
            "content": "",
            "url": "https://nope1013.github.io/firstrepo/2022/10/24/CB-error.html",
            "relUrl": "/2022/10/24/CB-error.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Web API Endpoints using Jokes",
            "content": "Model for API . We will begin our journey into APIs by creating and thinking about data. We have learned about Python Lists and dictionaries. In this data example, we are going to make &quot;the best computer jokes ever ;)&quot; and serve them over the Internet. The ultimate objective is to allow our viewers to provide a like or dislike on each of our jokes. . This code planning begins by coming up with some jokes and defining a data &quot;model&quot; to keep and manage the jokes. . jokes_data contains a list of dictionary records containing joke and reactions:haha or boohoo - joke_list contains collection of jokes we will put into jokes_data | . | Next comes some functions to interact with our jokes . def initJokes(): initializes jokes_data | def getJokes(): returns the complete list of jokes | def getJoke(): returns a single joke from our list | ... many more function can be examined by reading comments below ... | . | . import random jokes_data = [] joke_list = [ &quot;If you give someone a program... you will frustrate them for a day; if you teach them how to program... you will &quot; &quot;frustrate them for a lifetime.&quot;, &quot;Q: Why did I divide sin by tan? A: Just cos.&quot;, &quot;UNIX is basically a simple operating system... but you have to be a genius to understand the simplicity.&quot;, &quot;Enter any 11-digit prime number to continue.&quot;, &quot;If at first you don&#39;t succeed; call it version 1.0.&quot;, &quot;Java programmers are some of the most materialistic people I know, very object-oriented&quot;, &quot;The oldest computer can be traced back to Adam and Eve. It was an apple but with extremely limited memory. Just &quot; &quot;1 byte. And then everything crashed.&quot;, &quot;Q: Why did Wi-Fi and the computer get married? A: Because they had a connection&quot;, &quot;Bill Gates teaches a kindergarten class to count to ten. 1, 2, 3, 3.1, 95, 98, ME, 2000, XP, Vista, 7, 8, 10.&quot;, &quot;Q: What’s an aliens favorite computer key? A: the space bar!&quot;, &quot;There are 10 types of people in the world: those who understand binary, and those who don’t.&quot;, &quot;If it wasn&#39;t for C, we’d all be programming in BASI and OBOL.&quot;, &quot;Computers make very fast, very accurate mistakes.&quot;, &quot;Q: Why is it that programmers always confuse Halloween with Christmas? A: Because 31 OCT = 25 DEC.&quot;, &quot;Q: How many programmers does it take to change a light bulb? A: None. It’s a hardware problem.&quot;, &quot;The programmer got stuck in the shower because the instructions on the shampoo bottle said: Lather, Rinse, Repeat.&quot;, &quot;Q: What is the biggest lie in the entire universe? A: I have read and agree to the Terms and Conditions.&quot;, &#39;An SQL statement walks into a bar and sees two tables. It approaches, and asks may I join you?&#39; ] # Initialize jokes def initJokes(): # setup jokes into a dictionary with id, joke, haha, boohoo item_id = 0 for item in joke_list: jokes_data.append({&quot;id&quot;: item_id, &quot;joke&quot;: item, &quot;haha&quot;: 0, &quot;boohoo&quot;: 0}) item_id += 1 # prime some haha responses for i in range(200): id = getRandomJoke()[&#39;id&#39;] addJokeHaHa(id) # prime some haha responses for i in range(50): id = getRandomJoke()[&#39;id&#39;] addJokeBooHoo(id) # Return all jokes from jokes_data def getJokes(): return(jokes_data) # Joke getter def getJoke(id): return(jokes_data[id]) # Return random joke from jokes_data def getRandomJoke(): return(random.choice(jokes_data)) # Liked joke def favoriteJoke(): best = 0 bestID = -1 for joke in getJokes(): if joke[&#39;haha&#39;] &gt; best: best = joke[&#39;haha&#39;] bestID = joke[&#39;id&#39;] return jokes_data[bestID] # Jeered joke def jeeredJoke(): worst = 0 worstID = -1 for joke in getJokes(): if joke[&#39;boohoo&#39;] &gt; worst: worst = joke[&#39;boohoo&#39;] worstID = joke[&#39;id&#39;] return jokes_data[worstID] # Add to haha for requested id def addJokeHaHa(id): jokes_data[id][&#39;haha&#39;] = jokes_data[id][&#39;haha&#39;] + 1 return jokes_data[id][&#39;haha&#39;] # Add to boohoo for requested id def addJokeBooHoo(id): jokes_data[id][&#39;boohoo&#39;] = jokes_data[id][&#39;boohoo&#39;] + 1 return jokes_data[id][&#39;boohoo&#39;] # Pretty Print joke def printJoke(joke): print(joke[&#39;id&#39;], joke[&#39;joke&#39;], &quot; n&quot;, &quot;haha:&quot;, joke[&#39;haha&#39;], &quot; n&quot;, &quot;boohoo:&quot;, joke[&#39;boohoo&#39;], &quot; n&quot;) # Number of jokes def countJokes(): return len(jokes_data) # Test Joke Model if __name__ == &quot;__main__&quot;: initJokes() # initialize jokes # Most likes and most jeered best = favoriteJoke() print(&quot;Most liked&quot;, best[&#39;haha&#39;]) printJoke(best) worst = jeeredJoke() print(&quot;Most jeered&quot;, worst[&#39;boohoo&#39;]) printJoke(worst) # Random joke print(&quot;Random joke&quot;) printJoke(getRandomJoke()) # Count of Jokes print(&quot;Jokes Count: &quot; + str(countJokes())) . Backend Interface for Web API (Control) . An application programming interface (API) is the medium by which different systems of software interact. In our applications we have two big systems:1. Python Backend that stores data beyond a single Web page2. GH Pages/Fastpages Frontend that is responsible for presenting data . To communicate data between Frontend and Backend, this section Backend code provides and interface to the Frontend using a Web Service Endpoint. Examples of endpoints are listed below and can be typed within a browser, which will return JSON data: . https://flask.nighthawkcodingsociety.com/api/jokes | https://flask.nighthawkcodingsociety.com/api/jokes/2 | https://flask.nighthawkcodingsociety.com/api/jokes/random | . As you can see, these Endpoints return JSON. They are NOT that readable by normal humans. However, they are very effective in passing requested data across the Internet. The Frontend code is responsible for formatting and presenting and interface that allows the typical computer user to interact with this data. . The next cell of code is Creating Endpoints that return JSON. This allows developers in the Frontend to interact with Backend data. API is a contract between the Frontend and Backend on how to share data. . FYI, there is NO output from this section . . from flask import Blueprint, jsonify # jsonify creates an endpoint response object from flask_restful import Api, Resource # used for REST API building import requests # used for testing import random # Blueprints allow this code to be procedurally abstracted from main.py, meaning code is not all in one place app_api = Blueprint(&#39;api&#39;, __name__, url_prefix=&#39;/api/jokes&#39;) # endpoint prefix avoid redundantly typing /api/jokes over and over # API generator https://flask-restful.readthedocs.io/en/latest/api.html#id1 api = Api(app_api) class JokesAPI: # not implemented, this would be where we would allow creation of a new Joke class _Create(Resource): def post(self, joke): pass # getJokes() class _Read(Resource): def get(self): return jsonify(getJokes()) # getJoke(id) class _ReadID(Resource): def get(self, id): return jsonify(getJoke(id)) # getRandomJoke() class _ReadRandom(Resource): def get(self): return jsonify(getRandomJoke()) # getRandomJoke() class _ReadCount(Resource): def get(self): count = countJokes() countMsg = {&#39;count&#39;: count} return jsonify(countMsg) # put method: addJokeHaHa class _UpdateLike(Resource): def put(self, id): addJokeHaHa(id) return jsonify(getJoke(id)) # put method: addJokeBooHoo class _UpdateJeer(Resource): def put(self, id): addJokeBooHoo(id) return jsonify(getJoke(id)) # building RESTapi interfaces, these routes are added to Web Server http://&lt;server&lt;/api/jokes api.add_resource(_Create, &#39;/create/&lt;string:joke&gt;&#39;) api.add_resource(_Read, &#39;/&#39;) # default, which returns all jokes api.add_resource(_ReadID, &#39;/&lt;int:id&gt;&#39;) api.add_resource(_ReadRandom, &#39;/random&#39;) api.add_resource(_ReadCount, &#39;/count&#39;) api.add_resource(_UpdateLike, &#39;/like/&lt;int:id&gt;/&#39;) api.add_resource(_UpdateJeer, &#39;/jeer/&lt;int:id&gt;/&#39;) . Frontend (View Simulation) and Hacks . This python codes tests endpoints on a server. This can be handy for development and testing when making modifications to the Jokes Web APIs. This code works off of the server endpoint/url, not from code cells above it in this notebook. . To work with this code and make observation for learning... . Run a local server from flask_portfolio project and the change server variable to be local | Observe the requests endpoints and the output, see if you can observe what is happening/changing on put requests | The &quot;requests&quot; are captured into a List, the List is used in the for loop to extract from RESTful API format. | Try running this with Debugging and observe what data is being created at each step (Required) | Try to format this data in Python print statements to be more readable (Required) | Start and stop local server and observe errors | . # server = &quot;http://127.0.0.1:5000/&quot; # run local server = &#39;https://flask.nighthawkcodingsociety.com/&#39; # run from web server url = server + &quot;api/jokes/&quot; responses = [] # responses list # Get the count of jokes on server count_response = requests.get(url+&quot;count&quot;) count_json = count_response.json() count = count_json[&#39;count&#39;] # Update likes/dislikes test sequence num = str(random.randint(0, count-1)) # test a random record responses.append( requests.get(url+num) # Get/read joke by id ) responses.append( requests.put(url+&quot;like/&quot;+num) # Put/add to like count ) responses.append( requests.put(url+&quot;jeer/&quot;+num) # Put/add to jeer count ) # Get a random joke responses.append( requests.get(url+&quot;random&quot;) # Get/read a random joke ) # Cycle through and print responses for response in responses: print(response) try: print(response.json()) except: print(&quot;data error&quot;) .",
            "url": "https://nope1013.github.io/firstrepo/techtalk/webapi",
            "relUrl": "/techtalk/webapi",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Practicing with RapidAPI",
            "content": "import requests url = &quot;https://spotify23.p.rapidapi.com/search/&quot; querystring = {&quot;q&quot;:&quot;&lt;REQUIRED&gt;&quot;,&quot;type&quot;:&quot;multi&quot;,&quot;offset&quot;:&quot;0&quot;,&quot;limit&quot;:&quot;10&quot;,&quot;numberOfTopResults&quot;:&quot;5&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b4d4058738mshdb6ccac06cc335ap1eee30jsna64e9cbb2b8b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;spotify23.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) . {&#34;albums&#34;:{&#34;totalCount&#34;:28,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1rVhockt4RAiZFaK3M3zPB&#34;,&#34;name&#34;:&#34;No Jacket Required (2016 Remaster)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0279553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485179553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27379553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:7avlHipAwnKsxcXwC9Wpin&#34;,&#34;name&#34;:&#34;No Jacket Required (Deluxe Edition)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0257480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485157480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27357480be4ce4fd7659a25b7d9&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:3JalRx7hoyAC7pyoc7aaw7&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:1dwRnam2taNMv8H3VR6isd&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Assembly of Dust&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733a08256fb7ce8a38b41ea5ff&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2009}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:5gxL1YPTDUtyUG2Qp3wVO0&#34;,&#34;name&#34;:&#34;Required Etiquette Vol. 1&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Various Artists&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733f494786d82cc0f20a452dbe&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2014}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:53aQdegVPKq4MgSGgCQuLz&#34;,&#34;name&#34;:&#34;No Faith Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4DMlDJn7CPSSS0DuUf1vrH&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Snowy White&#34;}},{&#34;uri&#34;:&#34;spotify:artist:5zRIFTHDQwGWKZ7z61fFKb&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;The White Flames&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273c3e11f275c54926f5bfcb411&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1996}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:0BbeoTXqQv0qKki6CDcznI&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0yXeAQirPMVzAlhxGvux1s&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Liam Vickers&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0226cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485126cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27326cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2021}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1nYOe3S7pWbZwbzS92IScH&#34;,&#34;name&#34;:&#34;Required Repertoire for the 46th PTNA Piano Competition 2022, Vol. 1&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0LyfQWJT6nXafLPZqxe9Of&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Various Artists&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0258c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485158c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27358c6ffa1c61bed0f61ac1204&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2022}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6ytGxUYeXamODJwiXuZvjO&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Olivia Penalva&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2022}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:55bIeFDVLsLwa3WEnSJe0C&#34;,&#34;name&#34;:&#34;No Fantasy Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:5l9wiTZVfqQTfMDOt0HtwC&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Tiga&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e023542e4268c5a12d41a98b164&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048513542e4268c5a12d41a98b164&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2733542e4268c5a12d41a98b164&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2016}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:2ZNhj2qao5CEasrS2NH45J&#34;,&#34;name&#34;:&#34;No Assembly Required&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:70BRQ5tBte6kVqHviL3srE&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Pieces Of A Dream&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0238b547096e33bf308c492a4b&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485138b547096e33bf308c492a4b&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27338b547096e33bf308c492a4b&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:2004}}}]},&#34;artists&#34;:{&#34;totalCount&#34;:9,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebc86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178c86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:2FikzP9y7jVNqwpMgvyxnk&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb4cbc0b4529e9795a45a7ffe2&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f1784cbc0b4529e9795a45a7ffe2&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:4C2vxz7RaHdh9A97EA4NEp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required for Entry&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5eb49f6cfb7fc3162bd3024683a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f17849f6cfb7fc3162bd3024683a&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:0S5ZedpU3jHX9ihOrOVYhT&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Maintenance Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebbbe71234449ca45b2bc7da2a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178bbe71234449ca45b2bc7da2a&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:7npQgtl4CC9gX2uq9voTT2&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebd0309f42daa0bfd24954bd6e&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178d0309f42daa0bfd24954bd6e&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:5QDlAcYAOhP52ors9UnBah&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:null}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:6BAFZXut0gZrxHlxNWUBzn&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Hard Hat Required!!&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273f47c07d1097b04371ca2474a&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851f47c07d1097b04371ca2474a&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:5Ct8sSRWZX4Pp9hEJ6Qr9f&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;No Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27391150be1b9ed929035666754&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485191150be1b9ed929035666754&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1q1qCPxxITofbZLotknvyB&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Some Assembly Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273783e027a2b93eb73654f71e6&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851783e027a2b93eb73654f71e6&#34;,&#34;width&#34;:64,&#34;height&#34;:64}]}}}}]},&#34;episodes&#34;:{&#34;totalCount&#34;:916,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4afg7iiB5Ql8hv5DCpP9KH&#34;,&#34;name&#34;:&#34;Ep. 1023 - New Medical Guidelines Say Parental Consent Not Required For Child Gender Transition&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3435546},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-16T18:30:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Click here to join the member exclusive portion of my show: https: / /utm.io /ueSEm u00a0 Today on the Matt Walsh Show, the leading u201ctransgender health u201d organization has finally released its new guidelines recommending medical and surgical transition for kids. It also recommends going around the parents if they aren u2019t u201caffirming. u201d Parental consent is now optional, says WPATH. Also, in one of the best stories of the year, governor Ron DeSantis ships plane loads of illegals to the sanctuary city of Martha u2019s Vineyard. We u2019ll find out how this is just like the holocaust, according to the Left. And the treasury secretary says that the IRS is the foundation of our country. In our Daily Cancellation, a fat activist on Twitter says that she u2019s only fat because of white people. How does she connect those dots? u00a0 u00a0 - - - u00a0 DailyWire+: Stop giving your money to woke corporations that hate you. Get your Jeremy u2019s Razors today at https: / /www.jeremysrazors.com. u00a0 Get the brand new Johnny the Walrus Plushie here: https: / /bit.ly /3CHeLlu u00a0 u00a0- - - u00a0 Today u2019s Sponsors: With thousands of satisfied customers and an A+ rating with the Better Business Bureau, Birch Gold can help you protect your savings. Text &#34;WALSH &#34; to 989898 for your no-cost, no-obligation, FREE information kit. Get 10% OFF Your Will! Use Promo Code u2018WALSH u2019 at EpicWill.com u00a0 - - - Socials: Follow on Twitter: https: / /bit.ly /3Rv1VeF u00a0 Follow on Instagram: https: / /bit.ly /3KZC3oA u00a0 Follow on Facebook: https: / /bit.ly /3eBKjiA u00a0 Subscribe on YouTube: https: / /bit.ly /3RQp4rs u00a0 Learn more about your ad choices. Visit podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:3K4S63et2MdE0227PBB9dw&#34;,&#34;name&#34;:&#34;The Video Game Required Reading List: 1995-1999 [The Resties]&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a493f9081e6102fecccdfeddb&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3833113},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-04T06:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /0eac8fed3787b82b1f34f5d4ba7a890764d17e48&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /7ca66d4bb76706d2a7456813872d08815fe4b9ef&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /9dcdb02a31e7eb76c0b97e272476db6552838a3a&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;The Resties Required Reading List returns! u00a0Our goal is to curate a &#34;must play &#34; list of 25 games released between 1980 to 2020. Think of it like Video Games 101. This week, we&#39;ve selected games from 1995-1999. Join us as we revisit the moment when video games went u00a0mainstream! u00a0Visit @thebestiespod on Twitter to see a full list of games from this week&#39;s episode.Previous picks:1985-89 - Super Mario Bros., The Legend of Zelda, SimCity2005-09 - Resident Evil 4, Wii Sports, Call of Duty: Modern WarfareThis week&#39;s bonus recs: u00a0Deep Rock Galactic and When Worlds Collide (1951) u00a0&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:1K69VSdmJf2iWMGd7Ys21j&#34;,&#34;name&#34;:&#34;No More Than This Is Required | Ask Daily Stoic&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:973635},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-30T07:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a8488dbb4b623f432a3b6a673&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;We are impressed by people who do incredible things u2013whether it u2019s creating some great work of art or pulling off some impossible athletic feat, bringing about social change or building an enormous organization. How did they do it? Where did that come from? Sometimes to excuse our own failures, we tell ourselves it was genius or genetics, inspiration rather than perspiration. ud83d udcd5 Ryan Holiday&#39;s new book &#34;Discipline Is Destiny &#34; is available for pre-order now! We u2019ve put together a bunch of cool preorder bonuses u2014among them is a signed and numbered page from the original manuscript of the book. You can learn more about those and how to receive them over at Dailystoic.com /preorder. u00a0 u2709 ufe0f Want Stoic wisdom delivered to your inbox daily? Sign up for the FREE Daily Stoic email at https: / /dailystoic.com /dailyemail ud83d udcf1 Follow us: Instagram, Twitter, YouTube, TikTok, and Facebook u00a0See Privacy Policy at https: / /art19.com /privacy and California Privacy Notice at https: / /art19.com /privacy#do-not-sell-my-info.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:0KoDcIN8UXlDFKYYiuwClc&#34;,&#34;name&#34;:&#34;S7E2: No Roadmap Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:2357774},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-20T00:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac003d1a0800c56a9b3a5f29c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Michaela always craved the kind of life she didn u2019t have as a kid. She u2019d find a stable guy, settle down, and start a family. For several years, she seemed to be on her way. But then she discovered that, no matter how clear that original path may have seemed, she ultimately had to build her own. Email us at loveletters@boston.com.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4GN7MqKoicdv5lXOVpLRGc&#34;,&#34;name&#34;:&#34;Orgasms &amp; Oral (No Penetration Required)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68de0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fe0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ae0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:1971853},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-07-12T18:21:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68de0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fe0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ae0ba39359ef77404cd19e8e5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;It u2019s a good time to expand our definition of sex. At the end of the day, sex is play for adults: it u2019s where we collaborate with another person, creating a momentary world of pleasure and eroticism with them. But so often, we assume that sex equals penetration, and here u2019s the problem with that: not everyone orgasms during penetration. Not everyone feels erotic during penetration! So let u2019s make sex more interesting and exploratory, shall we?On today u2019s show, I u2019m talking up all the different types of non-penetrative sex u2013 like mutual masturbation, sensual massage, toys, hand stuff u2013 to help you break out of a conventional sex script, and have sex that u2019s more tailored to your personality and desires. Because you never have to take penetration off the table entirely u2026but what would happen if you took it off the table for a little while? (Hint: probably more orgasms.) u00a0Show Notes:Prostate Play 101Want to Try a Sex Cleanse? u00a0Penis Problems, Solved u00a0Shop with Emily4 Ways to Close The Orgasm GapFirst Date, First Orgasm, First Threesome u00a0 Hosted on Acast. See acast.com /privacy for more information.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:1pIV5kyw1Yg1NULRJyM240&#34;,&#34;name&#34;:&#34;The Flagship: &#39;All Gas, No Breaks&#39; mentality required for Texas facing embattled Oklahoma&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d75db97843096b67fa8a949f7&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f75db97843096b67fa8a949f7&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a75db97843096b67fa8a949f7&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:2805916},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-07T19:29:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a5a9969c4a0d7dca4426ac445&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;One of the most unique rivalry games in College Football kicks off Saturday morning when Texas takes on Oklahoma in the Red River Showdown. The Flagship Podcast delivers a loaded shows leading up to kickoff as Horns247&#39;s Chip Brown and Taylor Estes deliver the latest intel on the Longhorns QB situation, what to expect from Texas against this embattled OU team and much, much more! To learn more about listener data and our privacy practices visit: https: / /www.audacyinc.com /privacy-policy Learn more about your ad choices. Visit https: / /podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4zdN5vspt3aA2uxmq0sQDt&#34;,&#34;name&#34;:&#34;BARD - Required Standard of Care&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:894563},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-10-02T17:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68dc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1fc368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8ac368e8f06ee575aa1e13b698&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Mark and Gary link up on Sunday morning to discuss Gavin Newsom&#39;s signing of previously discussed California Assembly Bill 2098 governing what doctors can say to their patients. They also discuss a development in the Erika Jayne Tom Girardi saga and tease a story that&#39;ll be covered in further depth early this week with Adam. Watch Beyond A Reasonable Doubt on YouTube at YouTube.com /ReasonableDoubtPodcast and subscribe while you&#39;re there.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:5JTNmxeJ0xysbdspkgDElm&#34;,&#34;name&#34;:&#34;Peloton: Some Assembly Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:1358367},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-08-24T20:00:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a7bc876aa398b648f92bceaa5&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Amazon becomes the first partner to sell Peloton&#39;s equipment and apparel on their own site. (0:21) Bill Mann discusses: - The upside potential for Peloton - Whether Peloton may become part of Amazon&#39;s Prime membership offerings - Toll Brothers blaming supply chain and labor shortages for a cut in guidance - Nordstrom&#39;s challenges with inventory and family ownership (11:31) Jeremy Bowman and Jason Hall engage in a Bull vs. Bear debate over Beyond Meat. Who won the debate? You can cast your vote in our poll on Twitter @MotleyFoolMoney. Stocks mentioned: PTON, AMZN, TOL, JWN, BYND, YUM Host: Chris Hill Guest: Bill Mann Producer: Ricky Mulvey Engineer: Dan Boyd&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:5b7S50H9UhDr1iSQHBDxnD&#34;,&#34;name&#34;:&#34;WHATEVER IS REQUIRED&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /bcc27befd398f1cb53da780aeac22af6c3d6264f&#34;,&#34;width&#34;:64,&#34;height&#34;:36},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /4b3673c2783a84793200bcfc75186a6f94b47284&#34;,&#34;width&#34;:300,&#34;height&#34;:169},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /935182f3581b526209c3c7236987a6717865d362&#34;,&#34;width&#34;:640,&#34;height&#34;:360}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:211644},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2018-09-27T02:06:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /1dfd39d29f4f582a1b05fc0e5b09e00d97c780b4&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /f52eb414473d024bcd8edf24ba8787a4cbdb0059&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /9daaf33e2fe6b144fc5423ce2bdc19fc3c9190f4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;This episode is spoken by Dr. Ken Friendly, Les Brown, Eric Thomas and Andy Frisella. You can see more of Dr. Ken Friendly at tr.im /DrKenFriendly, Les Brown at tr.im /LesBrown, Eric Thomas at tr.im /EricThomas and Andy Frisella at tr.im /AndyFrisella. The music is MK Ultra by Really Slow Motion. You can see more of Really Slow Motion at tr.im /ReallySlowMotion.&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:7ApZigXnepkUslqMgFDrwC&#34;,&#34;name&#34;:&#34;r /Choosingbeggars JOB OPENING: PhD required. Pay: $0&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /8ac63e7a1028fce0c8790ed9738614d4d886b6cc&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /a07c27c4d7bdd30b14c8f828002d1c3f0a74d1ad&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /b62520a69d29390116eb0f9f9a911f780c54960e&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:954618},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2021-02-05T14:07:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /8ac63e7a1028fce0c8790ed9738614d4d886b6cc&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /a07c27c4d7bdd30b14c8f828002d1c3f0a74d1ad&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /b62520a69d29390116eb0f9f9a911f780c54960e&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;r /Choosingbeggars Are you ready for an exciting new career with CHOOSING BEGGARS INCORPORATED?! We&#39;ve got a great new job opening for a qualified candidate who has a PhD and 20 years of work experience. The pay is only $0 to start, but if you work here you will be rewarded with a sense of pride and accomplishment!&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}}]},&#34;genres&#34;:{&#34;totalCount&#34;:0,&#34;items&#34;:[]},&#34;playlists&#34;:{&#34;totalCount&#34;:3,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4Je4L7rV8xRuiybokARidj&#34;,&#34;name&#34;:&#34;Audiophile u2019s Guide to Eargasms: Headphones Required ud83c udfa7&#34;,&#34;description&#34;:&#34;An eclectic mix of some of my favorite songs to listen to with headphones. Headphones Required for Eargasm Experience!&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da848349d25e06538a01f545e4b4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Priscilla Bernstein&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4mTq7OtfwClwWcCGOseL6Y&#34;,&#34;name&#34;:&#34;Lipscomb Rock and Roll - Required Recordings&#34;,&#34;description&#34;:&#34;This playlist was created to facilitate study of the history of rock and roll as presented in Scott D. Lipscomb&amp;#x27;s &amp;quot;Rock and roll: Its history and stylistic development&amp;quot; (8th edition). See the Recommended Recordings list for additional suggestions beyond this core set of tracks.&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /640 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /300 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /mosaic.scdn.co /60 /ab67616d00001e022f017e3180aca26809813d2cab67616d00001e0246556d7ac53c73f319d33442ab67616d00001e028f5281f66452016858aef137ab67616d00001e02a0b8a1ce10fddbba6879262e&#34;,&#34;width&#34;:60,&#34;height&#34;:60}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Scott Lipscomb&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:5HcGRtFtRbYIXuzn50QMdP&#34;,&#34;name&#34;:&#34;We Are Scientists - Required Reading&#34;,&#34;description&#34;:&#34;Using a careful combination of streaming statistics and the clapping sounds we hear at shows, we u2019ve generated the definitive Greatest Hits playlist. For fans of We Are Scientists, and of rock &amp;amp; roll music, this is truly u2026 Required Reading.&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da8457377918dcef0337833b2456&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;We Are Scientists&#34;}}}]},&#34;podcasts&#34;:{&#34;totalCount&#34;:0,&#34;items&#34;:[]},&#34;topResults&#34;:{&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;},&#34;visuals&#34;:{&#34;avatarImage&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000e5ebc86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:640,&#34;height&#34;:640},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6761610000f178c86baaa7ad722a74dda4d43c&#34;,&#34;width&#34;:160,&#34;height&#34;:160}]}}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;id&#34;:&#34;0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;name&#34;:&#34;God Works&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0285c561c798615f07db3b3642&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485185c561c798615f07db3b3642&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27385c561c798615f07db3b3642&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0TCeHxWUMuwosZORJ6yBd9?si=80CGIsnnQOyguvHQhPX-_w&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6aEn1FrJfuRVm9CXpxzLge&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Papy Jeico&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:45375},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:playlist:4Je4L7rV8xRuiybokARidj&#34;,&#34;name&#34;:&#34;Audiophile u2019s Guide to Eargasms: Headphones Required ud83c udfa7&#34;,&#34;description&#34;:&#34;An eclectic mix of some of my favorite songs to listen to with headphones. Headphones Required for Eargasm Experience!&#34;,&#34;images&#34;:{&#34;items&#34;:[{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67706c0000da848349d25e06538a01f545e4b4&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}]},&#34;owner&#34;:{&#34;name&#34;:&#34;Priscilla Bernstein&#34;}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:album:1rVhockt4RAiZFaK3M3zPB&#34;,&#34;name&#34;:&#34;No Jacket Required (2016 Remaster)&#34;,&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4lxfqrEsLX6N1N4OCSkILp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Phil Collins&#34;}}]},&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0279553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485179553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27379553c4dcec1846d3a5c49ab&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;date&#34;:{&#34;year&#34;:1985}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:episode:4afg7iiB5Ql8hv5DCpP9KH&#34;,&#34;name&#34;:&#34;Ep. 1023 - New Medical Guidelines Say Parental Consent Not Required For Child Gender Transition&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:3435546},&#34;releaseDate&#34;:{&#34;isoString&#34;:&#34;2022-09-16T18:30:00Z&#34;},&#34;podcast&#34;:{&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000f68d306e6ebc33226673336530f8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67656300005f1f306e6ebc33226673336530f8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab6765630000ba8a306e6ebc33226673336530f8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]}},&#34;description&#34;:&#34;Click here to join the member exclusive portion of my show: https: / /utm.io /ueSEm u00a0 Today on the Matt Walsh Show, the leading u201ctransgender health u201d organization has finally released its new guidelines recommending medical and surgical transition for kids. It also recommends going around the parents if they aren u2019t u201caffirming. u201d Parental consent is now optional, says WPATH. Also, in one of the best stories of the year, governor Ron DeSantis ships plane loads of illegals to the sanctuary city of Martha u2019s Vineyard. We u2019ll find out how this is just like the holocaust, according to the Left. And the treasury secretary says that the IRS is the foundation of our country. In our Daily Cancellation, a fat activist on Twitter says that she u2019s only fat because of white people. How does she connect those dots? u00a0 u00a0 - - - u00a0 DailyWire+: Stop giving your money to woke corporations that hate you. Get your Jeremy u2019s Razors today at https: / /www.jeremysrazors.com. u00a0 Get the brand new Johnny the Walrus Plushie here: https: / /bit.ly /3CHeLlu u00a0 u00a0- - - u00a0 Today u2019s Sponsors: With thousands of satisfied customers and an A+ rating with the Better Business Bureau, Birch Gold can help you protect your savings. Text &#34;WALSH &#34; to 989898 for your no-cost, no-obligation, FREE information kit. Get 10% OFF Your Will! Use Promo Code u2018WALSH u2019 at EpicWill.com u00a0 - - - Socials: Follow on Twitter: https: / /bit.ly /3Rv1VeF u00a0 Follow on Instagram: https: / /bit.ly /3KZC3oA u00a0 Follow on Facebook: https: / /bit.ly /3eBKjiA u00a0 Subscribe on YouTube: https: / /bit.ly /3RQp4rs u00a0 Learn more about your ad choices. Visit podcastchoices.com /adchoices&#34;,&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;}}}],&#34;featured&#34;:[]},&#34;tracks&#34;:{&#34;totalCount&#34;:27,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;id&#34;:&#34;0AzjJdpWFNfl2Jfq8PiNwA&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;name&#34;:&#34;God Works&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0285c561c798615f07db3b3642&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485185c561c798615f07db3b3642&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27385c561c798615f07db3b3642&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0TCeHxWUMuwosZORJ6yBd9&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0TCeHxWUMuwosZORJ6yBd9?si=-EabeSJURfyMCagRJA28KQ&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6aEn1FrJfuRVm9CXpxzLge&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Papy Jeico&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:45375},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:10UNa6qLnyJqCidBklPGm0&#34;,&#34;id&#34;:&#34;10UNa6qLnyJqCidBklPGm0&#34;,&#34;name&#34;:&#34;Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:2smT3A7MjmmfKNFwlDnEBd&#34;,&#34;name&#34;:&#34;Pre Heat&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e020520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048510520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2730520ecfcc5dfbe14ef8cf183&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;2smT3A7MjmmfKNFwlDnEBd&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /2smT3A7MjmmfKNFwlDnEBd?si=GIvFjuMXRZu1EnGwRijFcA&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:57fgfg6PTbTqtPegX6rXV5&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;HEAVY CHEST&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:167206},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:1cIfODqkOniMnWWl0EcRMc&#34;,&#34;id&#34;:&#34;1cIfODqkOniMnWWl0EcRMc&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:0BbeoTXqQv0qKki6CDcznI&#34;,&#34;name&#34;:&#34;Disassembly Required (Teaser Original Soundtrack)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0226cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485126cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27326cf2e2751ee0aec2cf62479&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;0BbeoTXqQv0qKki6CDcznI&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /0BbeoTXqQv0qKki6CDcznI?si=dWL3WhAHTnKO91GKtRpiVg&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:0yXeAQirPMVzAlhxGvux1s&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Liam Vickers&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:120000},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:2R6EjjxkSop7x8adokEnqb&#34;,&#34;id&#34;:&#34;2R6EjjxkSop7x8adokEnqb&#34;,&#34;name&#34;:&#34;REQUIRED MALFUNCTION&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:79B1nOppxSiiA8rfe7EGzg&#34;,&#34;name&#34;:&#34;DIVISION&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e026baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048516baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2736baeeab4c2084620dca4fc02&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;79B1nOppxSiiA8rfe7EGzg&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /79B1nOppxSiiA8rfe7EGzg?si=0LiXNhgGQ6CvDFdA_qsmFw&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4gRFSxjAcJkb54BDjqo7Bc&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;the GazettE&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:247253},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:6ce7mZm67N4CB6llmyRPib&#34;,&#34;id&#34;:&#34;6ce7mZm67N4CB6llmyRPib&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;name&#34;:&#34;Assembly Required&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273e098b0f0c819f5075263fd0c&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;3xEUUVwjNVvTaHQjcpea8O&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /3xEUUVwjNVvTaHQjcpea8O?si=hqEWHTzIRb61Nez4S7l5DA&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:6ytGxUYeXamODJwiXuZvjO&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Olivia Penalva&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:225684},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:22S28x7QBBJmVSIzz4YCnE&#34;,&#34;id&#34;:&#34;22S28x7QBBJmVSIzz4YCnE&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:7FuOdULJORMIFwOFb7EXTG&#34;,&#34;name&#34;:&#34;Singles&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273c158d1d8cc70e1b6d3152eb7&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;7FuOdULJORMIFwOFb7EXTG&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /7FuOdULJORMIFwOFb7EXTG?si=6DQQAeCsTTqrZIjFHLQs4g&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:1gUi2utSbJLNPddYENJAp4&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Abhi The Nomad&#34;}},{&#34;uri&#34;:&#34;spotify:artist:20Ec073CbzajOXt5a3rfsI&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Foster&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:157000},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:4eLPlC9E0XWQcJd5WjjKQL&#34;,&#34;id&#34;:&#34;4eLPlC9E0XWQcJd5WjjKQL&#34;,&#34;name&#34;:&#34;Wanna Fly&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:2gEl3qFsgQQtiK8TqMotBt&#34;,&#34;name&#34;:&#34;Wanna Fly&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02358f83f11f3df253118efe7a&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851358f83f11f3df253118efe7a&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273358f83f11f3df253118efe7a&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;2gEl3qFsgQQtiK8TqMotBt&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /2gEl3qFsgQQtiK8TqMotBt?si=fB2LWqZjRVaTbDYqSaUjXg&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:4xSp6WltH5N47OrAu4pjKw&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Revelation&#34;}},{&#34;uri&#34;:&#34;spotify:artist:1g05P4Ua1FzC0cQxSlgmyu&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Required&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:184511},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:7EpuVjHnXlbLOyYOvIUcXx&#34;,&#34;id&#34;:&#34;7EpuVjHnXlbLOyYOvIUcXx&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:5l1BFWphq5XiWlpbYUjrhr&#34;,&#34;name&#34;:&#34;Portal 2: Songs to Test By (Collectors Edition)&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e0294008f6625cab88b318e3c49&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000485194008f6625cab88b318e3c49&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b27394008f6625cab88b318e3c49&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;5l1BFWphq5XiWlpbYUjrhr&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /5l1BFWphq5XiWlpbYUjrhr?si=bSscfaZ_Srm94TRZYnEFmw&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:7d58WZ8qQHy2Sm5p52V2NP&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Aperture Science Psychoacoustic Laboratories&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:112106},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:5vdTsxP1p3Vshq9TaI9Ffr&#34;,&#34;id&#34;:&#34;5vdTsxP1p3Vshq9TaI9Ffr&#34;,&#34;name&#34;:&#34;Some Assembly Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:6aBCXfFv8Nq5u7pnrwrpmd&#34;,&#34;name&#34;:&#34;The Beginning Of All Things To End&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e026cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d000048516cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b2736cdfc4722c49b54cf6dd27da&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;6aBCXfFv8Nq5u7pnrwrpmd&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /6aBCXfFv8Nq5u7pnrwrpmd?si=40-8nooLSO-pMF7uIFDv0Q&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:2Pfv2w8a20xzC7Dr7QXRqM&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Mudvayne&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;EXPLICIT&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:166840},&#34;playability&#34;:{&#34;playable&#34;:true}}},{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:track:0PJt62CEBPvMdLDY1RQ0Oo&#34;,&#34;id&#34;:&#34;0PJt62CEBPvMdLDY1RQ0Oo&#34;,&#34;name&#34;:&#34;No Names Required&#34;,&#34;albumOfTrack&#34;:{&#34;uri&#34;:&#34;spotify:album:4zNKdLbL3B21JpSfVllCPC&#34;,&#34;name&#34;:&#34;Midnight&#34;,&#34;coverArt&#34;:{&#34;sources&#34;:[{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00001e02678d47c8733f90365864b5e8&#34;,&#34;width&#34;:300,&#34;height&#34;:300},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d00004851678d47c8733f90365864b5e8&#34;,&#34;width&#34;:64,&#34;height&#34;:64},{&#34;url&#34;:&#34;https: / /i.scdn.co /image /ab67616d0000b273678d47c8733f90365864b5e8&#34;,&#34;width&#34;:640,&#34;height&#34;:640}]},&#34;id&#34;:&#34;4zNKdLbL3B21JpSfVllCPC&#34;,&#34;sharingInfo&#34;:{&#34;shareUrl&#34;:&#34;https: / /open.spotify.com /album /4zNKdLbL3B21JpSfVllCPC?si=9ejqYDoyQ3K7RDig4EOSkw&#34;}},&#34;artists&#34;:{&#34;items&#34;:[{&#34;uri&#34;:&#34;spotify:artist:2LANxYqr0jAMn7BpUV5hOp&#34;,&#34;profile&#34;:{&#34;name&#34;:&#34;Lord of the Dream&#34;}}]},&#34;contentRating&#34;:{&#34;label&#34;:&#34;NONE&#34;},&#34;duration&#34;:{&#34;totalMilliseconds&#34;:93351},&#34;playability&#34;:{&#34;playable&#34;:true}}}]},&#34;users&#34;:{&#34;totalCount&#34;:1,&#34;items&#34;:[{&#34;data&#34;:{&#34;uri&#34;:&#34;spotify:user:jwbe7sw2exw0sswleoende557&#34;,&#34;id&#34;:&#34;jwbe7sw2exw0sswleoende557&#34;,&#34;displayName&#34;:&#34;no headphones required&#34;,&#34;username&#34;:&#34;jwbe7sw2exw0sswleoende557&#34;,&#34;image&#34;:{&#34;smallImageUrl&#34;:&#34;https: / /i.scdn.co /image /ab67757000003b827365e3e82a12ae1089dd8fde&#34;,&#34;largeImageUrl&#34;:&#34;https: / /i.scdn.co /image /ab6775700000ee857365e3e82a12ae1089dd8fde&#34;}}}]}} . Tried to format with json with print(response.json) and other methods, unsuccessful . National Burgers API . import requests url = &quot;https://burgers1.p.rapidapi.com/burgers&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;b4d4058738mshdb6ccac06cc335ap1eee30jsna64e9cbb2b8b&quot;, &quot;X-RapidAPI-Host&quot;: &quot;burgers1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.text) . [ { &#34;id&#34;: 0, &#34;name&#34;: &#34;Tribute Burger&#34;, &#34;restaurant&#34;: &#34;Honest Burgers&#34;, &#34;web&#34;: &#34;www.honestburgers.co.uk&#34;, &#34;description&#34;: &#34;A mouth-watering honest beef burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;75&#34;, &#34;line1&#34;: &#34;Venn Street&#34;, &#34;line2&#34;: &#34;Clapham&#34;, &#34;postcode&#34;: &#34;SW4 0BD&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 1, &#34;name&#34;: &#34;Pulled Mooshie&#34;, &#34;restaurant&#34;: &#34;Mooshies&#34;, &#34;web&#34;: &#34;www.veganburger.org&#34;, &#34;description&#34;: &#34;Spicy vegan burger with jackfruit&#34;, &#34;ingredients&#34;: [ &#34;jackfruit&#34;, &#34;coleslaw&#34;, &#34;gluten free bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;104&#34;, &#34;line1&#34;: &#34;Brick Lane&#34;, &#34;line2&#34;: &#34;Shoreditch&#34;, &#34;postcode&#34;: &#34;E1 6RL&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 2, &#34;name&#34;: &#34;Krabby Patty&#34;, &#34;restaurant&#34;: &#34;Krusty Krab&#34;, &#34;web&#34;: &#34;https://twitter.com/SpongeBob&#34;, &#34;description&#34;: &#34;The only people who don&#39;t like a Krabby Patty have never tasted one.&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;patty&#34;, &#34;ketchup&#34;, &#34;mustard&#34;, &#34;pickles&#34;, &#34;onions&#34;, &#34;lettuce&#34;, &#34;cheese&#34;, &#34;tomato&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;831&#34;, &#34;line1&#34;: &#34;Bottom Feeder Lane&#34;, &#34;line2&#34;: &#34;&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;Bikini Bottom, Pacific Ocean&#34; } ] }, { &#34;id&#34;: 3, &#34;name&#34;: &#34;The Good Burger&#34;, &#34;restaurant&#34;: &#34;Good Burger&#34;, &#34;web&#34;: &#34;https://en.wikipedia.org/wiki/Good_Burger&#34;, &#34;description&#34;: &#34;Welcome to Good Burger, home of the Good Burger, can I take your order?&#34;, &#34;ingredients&#34;: [ &#34;bun&#34;, &#34;tomato&#34;, &#34;Ed&#39;s secret sauce&#34;, &#34;lettuce&#34;, &#34;onions&#34;, &#34;cheese&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;000&#34;, &#34;line1&#34;: &#34;Good Burger&#34;, &#34;line2&#34;: &#34;437 Glendora Ave.&#34;, &#34;postcode&#34;: &#34;CA&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 4, &#34;name&#34;: &#34;Crunchy Nacho Burger&#34;, &#34;restaurant&#34;: &#34;Max Burgers&#34;, &#34;web&#34;: &#34;https://www.max.se/maten/meny/burgare/crunchy-nacho-burger/&#34;, &#34;description&#34;: &#34;The best combination of crunchiness and softness, all in one single burger&#34;, &#34;ingredients&#34;: [ &#34;sesame bun&#34;, &#34;salsa&#34;, &#34;cheddar&#34;, &#34;nachos&#34;, &#34;beef&#34;, &#34;tomato&#34;, &#34;pickled onion&#34;, &#34;lettuce&#34;, &#34;jalapeño mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;48D&#34;, &#34;line1&#34;: &#34;Skeppsbrogatan&#34;, &#34;line2&#34;: &#34;Luleå&#34;, &#34;postcode&#34;: &#34;971 25&#34;, &#34;country&#34;: &#34;Sweden&#34; } ] }, { &#34;id&#34;: 5, &#34;name&#34;: &#34;Barbie Burger&#34;, &#34;restaurant&#34;: &#34;Flower Burger&#34;, &#34;web&#34;: &#34;https://www.flowerburger.it/&#34;, &#34;description&#34;: &#34;From a pink explosion was born Barbie Burger, a special edition in partnership with Mattel&#34;, &#34;ingredients&#34;: [ &#34;pink bun&#34;, &#34;lentil and beetroot burger&#34;, &#34;tomatoes&#34;, &#34;gentilina salad&#34;, &#34;barbie hummus&#34;, &#34;barbie mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;Porta Genova&#34;, &#34;line2&#34;: &#34;Via Tortona&#34;, &#34;postcode&#34;: &#34;20144&#34;, &#34;country&#34;: &#34;Italy&#34; } ] }, { &#34;id&#34;: 6, &#34;name&#34;: &#34;Curry On My Wayward Bun&#34;, &#34;restaurant&#34;: &#34;Bob&#39;s Burgers&#34;, &#34;web&#34;: &#34;https://bobs-burgers.fandom.com/wiki/Burger_of_the_Day&#34;, &#34;description&#34;: &#34;N/A&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;curry&#34;, &#34;bun&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;0&#34;, &#34;line1&#34;: &#34;Ocean Avenue&#34;, &#34;line2&#34;: &#34;NJ&#34;, &#34;postcode&#34;: &#34;08260&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 7, &#34;name&#34;: &#34;MEISTER ALLER KLASSEN&#34;, &#34;restaurant&#34;: &#34;Burgermeister&#34;, &#34;web&#34;: &#34;https://burger-meister.de&#34;, &#34;description&#34;: &#34;Fast food joint located in a public toilet? Why on earth?!&#34;, &#34;ingredients&#34;: [ &#34;2 x meat&#34;, &#34;2 x cheese&#34;, &#34;bacon&#34;, &#34;barbequesauce&#34;, &#34;jalapenos&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;Potsdamer Platz&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10785&#34;, &#34;country&#34;: &#34;Germany&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;45&#34;, &#34;line1&#34;: &#34;Eberswalder, Schönhauser Allee&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10435&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 8, &#34;name&#34;: &#34;Vegetarian Burger (Indian Style)&#34;, &#34;restaurant&#34;: &#34;Indian Burgers&#34;, &#34;web&#34;: &#34;https://www.cookwithmanali.com/vegetarian-burger-indian-style/&#34;, &#34;description&#34;: &#34;With summer around the corner, I had to share a vegetarian burger recipe with you guys. Actually I plan to share more in the next month but I thought I will start with this Indian style Vegetarian Burger aka Masala Burger!&#34;, &#34;ingredients&#34;: [ &#34;american cheese&#34;, &#34;burger sauce&#34;, &#34;french mustard&#34;, &#34;pickes&#34;, &#34;onion&#34;, &#34;Veggies&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;007&#34;, &#34;line1&#34;: &#34;Line1&#34;, &#34;line2&#34;: &#34;Line2&#34;, &#34;postcode&#34;: &#34;&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 9, &#34;name&#34;: &#34;Fat Santa&#34;, &#34;restaurant&#34;: &#34;Sky City Hamilton&#34;, &#34;web&#34;: &#34;https://skycityhamilton.co.nz/eat-drink/eat-burger/&#34;, &#34;description&#34;: &#34;A Christmas themed burger&#34;, &#34;ingredients&#34;: [ &#34;chicken thigh&#34;, &#34;champagne ham&#34;, &#34;sage and onion stuffing&#34;, &#34;gravy mash&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;cranberry sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;348&#34;, &#34;line1&#34;: &#34;Victoria street&#34;, &#34;line2&#34;: &#34;Hamilton Central, Hamilton&#34;, &#34;postcode&#34;: &#34;3204&#34;, &#34;country&#34;: &#34;New Zealand&#34; } ] }, { &#34;id&#34;: 10, &#34;name&#34;: &#34;Blondie&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Delicious steak burger&#34;, &#34;ingredients&#34;: [ &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;bacon&#34;, &#34;egg&#34;, &#34;cheese&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 11, &#34;name&#34;: &#34;Monster Burger&#34;, &#34;restaurant&#34;: &#34;Yankys&#34;, &#34;web&#34;: &#34;http://yankyslambton.co.za/menu/&#34;, &#34;description&#34;: &#34;Massive meaty burger - the size of a dinner plate&#34;, &#34;ingredients&#34;: [ &#34;250g patty&#34;, &#34;bacon&#34;, &#34;cheese&#34;, &#34;2 eggs&#34;, &#34;steak&#34;, &#34;BBQ sauce&#34;, &#34;lettuce&#34;, &#34;tomato&#34;, &#34;onion&#34;, &#34;gerkins&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;114&#34;, &#34;line1&#34;: &#34;Webber Road&#34;, &#34;line2&#34;: &#34;Lambton, Germiston&#34;, &#34;postcode&#34;: &#34;1414&#34;, &#34;country&#34;: &#34;South Africa&#34; } ] }, { &#34;id&#34;: 12, &#34;name&#34;: &#34;Buffalo chicken burger&#34;, &#34;restaurant&#34;: &#34;Meat Mission&#34;, &#34;web&#34;: &#34;http://meatliquor.com/&#34;, &#34;description&#34;: &#34;Large, messy, super tasty buffalo chicken burger&#34;, &#34;ingredients&#34;: [ &#34;Fried chicken breast&#34;, &#34;House-made buffalo sauce&#34;, &#34;Lettuce&#34;, &#34;Red onions&#34;, &#34;Blue cheese sauce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;15&#34;, &#34;line1&#34;: &#34;Hoxton Market,&#34;, &#34;line2&#34;: &#34;Hackney, London&#34;, &#34;postcode&#34;: &#34;N1 6HG&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 13, &#34;name&#34;: &#34;Cheatday Burger&#34;, &#34;restaurant&#34;: &#34;Burgeramt&#34;, &#34;web&#34;: &#34;https://www.burgeramt.com/&#34;, &#34;description&#34;: &#34;Perfect when you need a day off from your workout routine&#34;, &#34;ingredients&#34;: [ &#34;double beef&#34;, &#34;chilli-cheese sauce&#34;, &#34;2 slices cheddar cheese&#34;, &#34;crispy bacon stripes&#34;, &#34;nachos&#34;, &#34;mayonnaise&#34;, &#34;mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;21 - 22&#34;, &#34;line1&#34;: &#34;Krossener Straße&#34;, &#34;line2&#34;: &#34;Berlin&#34;, &#34;postcode&#34;: &#34;10245&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 14, &#34;name&#34;: &#34;The Truffler (vegan)&#34;, &#34;restaurant&#34;: &#34;Byron Burgers&#34;, &#34;web&#34;: &#34;https://www.byron.co.uk/&#34;, &#34;description&#34;: &#34;Beyond Meat patty, crispy onions, mushrooms, pickled red onions, lettuce American mustard, truffle ‘cheese’ fondue, truffle ‘mayo’&#34;, &#34;ingredients&#34;: [ &#34;1/4 Beyond Meat patty&#34;, &#34;crispy onions&#34;, &#34;sauteed mushrooms&#34;, &#34;pickled red onions&#34;, &#34;lettuce&#34;, &#34;American mustard&#34;, &#34;truffle vegan cheese fondue&#34;, &#34;truffle vegan mayo&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;41-45&#34;, &#34;line1&#34;: &#34;The Cut&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;SE1 8LF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;The Loft&#34;, &#34;line1&#34;: &#34;Westfield Shopping Centre&#34;, &#34;line2&#34;: &#34;London&#34;, &#34;postcode&#34;: &#34;W12 7GF&#34;, &#34;country&#34;: &#34;United Kingdom&#34; } ] }, { &#34;id&#34;: 15, &#34;name&#34;: &#34;Aloette Buger&#34;, &#34;restaurant&#34;: &#34;Aloette&#34;, &#34;web&#34;: &#34;https://aloetterestaurant.com/&#34;, &#34;description&#34;: &#34;Haute cuisine meets cravings for cheeseburgers.&#34;, &#34;ingredients&#34;: [ &#34;6oz beef patty, served medium&#34;, &#34;griddled beaufort cheese&#34;, &#34;cheddar mayo&#34;, &#34;shredded lettuce&#34;, &#34;potato roll&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;163&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2A5&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 16, &#34;name&#34;: &#34;BBQ Burger&#34;, &#34;restaurant&#34;: &#34;Fresh Plant Powered&#34;, &#34;web&#34;: &#34;https://freshplantpowered.com/&#34;, &#34;description&#34;: &#34;Vegan burger made from whole, natural ingredients.&#34;, &#34;ingredients&#34;: [ &#34;house-made grain burger&#34;, &#34;bbq sauce&#34;, &#34;quinoa onion rings&#34;, &#34;vegan garlic mayo&#34;, &#34;napa cabbage&#34;, &#34;banana chillies&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;147&#34;, &#34;line1&#34;: &#34;Spadina Ave&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5V 2L7&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;326&#34;, &#34;line1&#34;: &#34;Bloor Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5S 1W5&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;894&#34;, &#34;line1&#34;: &#34;Queen Street West&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M6J 1G3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;90&#34;, &#34;line1&#34;: &#34;Eglinton Avenue East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M4P 2Y3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Front Street East&#34;, &#34;line2&#34;: &#34;Toronto&#34;, &#34;postcode&#34;: &#34;M5E 1B3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;95&#34;, &#34;line1&#34;: &#34;Queen Elizabeth Blvd&#34;, &#34;line2&#34;: &#34;Etobicoke&#34;, &#34;postcode&#34;: &#34;M8Z 1P3&#34;, &#34;country&#34;: &#34;Canada&#34; }, { &#34;addressId&#34;: 6, &#34;number&#34;: &#34;8768&#34;, &#34;line1&#34;: &#34;Sunset Blvd&#34;, &#34;line2&#34;: &#34;Los Angeles&#34;, &#34;postcode&#34;: &#34;90069&#34;, &#34;country&#34;: &#34;United States&#34; } ] }, { &#34;id&#34;: 17, &#34;name&#34;: &#34;Carroll&#39;s Cheese Burger&#34;, &#34;restaurant&#34;: &#34;Carroll&#39;s Pub Worms&#34;, &#34;web&#34;: &#34;https://www.carrolls-pub-worms.de/&#34;, &#34;description&#34;: &#34;Tasty black angus beef burger.&#34;, &#34;ingredients&#34;: [ &#34;Irish black angus beef&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;caramelized onions&#34;, &#34;pickles&#34;, &#34;cheddar cheese&#34;, &#34;tomato relish&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;54&#34;, &#34;line1&#34;: &#34;Rheinstraße&#34;, &#34;line2&#34;: &#34;Worms&#34;, &#34;postcode&#34;: &#34;67547&#34;, &#34;country&#34;: &#34;Germany&#34; } ] }, { &#34;id&#34;: 18, &#34;name&#34;: &#34;Mojitto Burger&#34;, &#34;restaurant&#34;: &#34;Burger King India&#34;, &#34;web&#34;: &#34;www.mojitto.com&#34;, &#34;description&#34;: &#34;Burger a day keeps the fat away&#34;, &#34;ingredients&#34;: [ &#34;bread&#34;, &#34;maida&#34;, &#34;chick&#34;, &#34;patty&#34; ], &#34;addresses&#34;: [ { &#34;addressID&#34;: 0, &#34;number&#34;: &#34;8A&#34;, &#34;line1&#34;: &#34;Kaythye millath street&#34;, &#34;postcode&#34;: &#34;620020&#34;, &#34;country&#34;: &#34;India&#34; } ] }, { &#34;id&#34;: 19, &#34;name&#34;: &#34;Double Slab Burger&#34;, &#34;restaurant&#34;: &#34;Slab Burgers&#34;, &#34;web&#34;: &#34;www.slabburgers.com&#34;, &#34;description&#34;: &#34;taste of hormone-free running cows&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;caramelized onions&#34;, &#34;slab sauce&#34;, &#34;pickles&#34;, &#34;mushrooms&#34;, &#34;tomato&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;47&#34;, &#34;line1&#34;: &#34;Charles Street West&#34;, &#34;line2&#34;: &#34;Toronto, Ontario&#34;, &#34;postcode&#34;: &#34;M4Y 2R4&#34;, &#34;country&#34;: &#34;Canada&#34; } ] }, { &#34;id&#34;: 20, &#34;name&#34;: &#34;Du Brown&#34;, &#34;restaurant&#34;: &#34;Du Brown Burger Café&#34;, &#34;web&#34;: &#34;https://www.dubrown.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;bacon&#34;, &#34;caramelized onions&#34;, &#34;cheddar cheese&#34;, &#34;barbecue sauce&#34;, &#34;onion rings&#34;, &#34;jalepeños&#34;, &#34;tomato&#34;, &#34;lettuce&#34;, &#34;chipote mayonaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;rue St Léonard&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 21, &#34;name&#34;: &#34;Melting Potes&#34;, &#34;restaurant&#34;: &#34;Melting Potes Nantes&#34;, &#34;web&#34;: &#34;https://www.meltingpotesnantes.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;12&#34;, &#34;line1&#34;: &#34;boulevard de la Prairie au Duc&#34;, &#34;line2&#34;: &#34;Ile de Nantes, Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 22, &#34;name&#34;: &#34;Big Fernand&#34;, &#34;restaurant&#34;: &#34;Big Fernand&#34;, &#34;web&#34;: &#34;https://bigfernand.com/&#34;, &#34;description&#34;: &#34;L&#39;atelier du Hamburgé - The burger workshop&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;sundried tomates&#34;, &#34;tatar sauce&#34;, &#34;confit onions&#34;, &#34;blue cheese&#34;, &#34;smokey bacon&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue des Halles&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;3&#34;, &#34;line1&#34;: &#34;Place de Béthune&#34;, &#34;line2&#34;: &#34;Lille&#34;, &#34;postcode&#34;: &#34;59000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;6&#34;, &#34;line1&#34;: &#34;place Jean Jaurès&#34;, &#34;line2&#34;: &#34;Montpellier&#34;, &#34;postcode&#34;: &#34;34000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;86&#34;, &#34;line1&#34;: &#34;Boulevard du Montparnasse&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75014&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;55&#34;, &#34;line1&#34;: &#34;rue de Faubourg Poissonnière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 5, &#34;number&#34;: &#34;4&#34;, &#34;line1&#34;: &#34;rue du Parchemin&#34;, &#34;line2&#34;: &#34;Strasbourg&#34;, &#34;postcode&#34;: &#34;67000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 23, &#34;name&#34;: &#34;PNY Burger&#34;, &#34;restaurant&#34;: &#34;PNY Burger&#34;, &#34;web&#34;: &#34;https://pnyburger.com/&#34;, &#34;description&#34;: &#34;Home of the no bullshit burger&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;poutine&#34;, &#34;raclette cheese&#34;, &#34;honey mustard sauce&#34;, &#34;goats cheese&#34;, &#34;crispy onions&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;50&#34;, &#34;line1&#34;: &#34;rue de Cautartin&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;120&#34;, &#34;line1&#34;: &#34;rue du Faubourg St Antoine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75012&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;1&#34;, &#34;line1&#34;: &#34;rue Perrée&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75003&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;96&#34;, &#34;line1&#34;: &#34;rue Oberkampf&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75011&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;24&#34;, &#34;line1&#34;: &#34;rue Pierre Fontaine&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75009&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 24, &#34;name&#34;: &#34;231 East&#34;, &#34;restaurant&#34;: &#34;231 East Street&#34;, &#34;web&#34;: &#34;https://www.231-east.fr/&#34;, &#34;description&#34;: &#34;True New York style burger in France&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;smoked bacon&#34;, &#34;chicken&#34;, &#34;veggie burgers&#34;, &#34;brioche bun&#34;, &#34;honey mustard sauce&#34;, &#34;onion chutney&#34;, &#34;pepper sauce&#34;, &#34;avacado&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;7&#34;, &#34;line1&#34;: &#34;rue de la Couronne&#34;, &#34;line2&#34;: &#34;Aix-en-Provence&#34;, &#34;postcode&#34;: &#34;13100&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;9&#34;, &#34;line1&#34;: &#34;faubourg Sainte-Claire&#34;, &#34;line2&#34;: &#34;Annecy&#34;, &#34;postcode&#34;: &#34;7400&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 2, &#34;number&#34;: &#34;10&#34;, &#34;line1&#34;: &#34;Grande rue&#34;, &#34;line2&#34;: &#34;Grenoble&#34;, &#34;postcode&#34;: &#34;38000&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 3, &#34;number&#34;: &#34;2&#34;, &#34;line1&#34;: &#34;rue de la Pépinière&#34;, &#34;line2&#34;: &#34;Paris&#34;, &#34;postcode&#34;: &#34;75008&#34;, &#34;country&#34;: &#34;France&#34; }, { &#34;addressId&#34;: 4, &#34;number&#34;: &#34;&#34;, &#34;line1&#34;: &#34;boulevard Géneral de Gaulle&#34;, &#34;line2&#34;: &#34;Nantes&#34;, &#34;postcode&#34;: &#34;44000&#34;, &#34;country&#34;: &#34;France&#34; } ] }, { &#34;id&#34;: 25, &#34;name&#34;: &#34;Cajun Black Bean Burger&#34;, &#34;restaurant&#34;: &#34;The Chicago Diner&#34;, &#34;web&#34;: &#34;www.veggiediner.com&#34;, &#34;description&#34;: &#34;a hearty veggie burger with a kick that goes great with sweet potato fries&#34;, &#34;ingredients&#34;: [ &#34;spicy black bean veggie patty&#34;, &#34;sautéed onions&#34;, &#34;mushrooms&#34;, &#34;spinach&#34;, &#34;tomato&#34;, &#34;fried jalapeño&#34;, &#34;cheddar sauce&#34;, &#34;creole mustard&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;3411&#34;, &#34;line1&#34;: &#34;N Halsted St&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60657&#34;, &#34;country&#34;: &#34;USA&#34; }, { &#34;addressId&#34;: 1, &#34;number&#34;: &#34;2333&#34;, &#34;line1&#34;: &#34;N Milwaukee Ave&#34;, &#34;line2&#34;: &#34;Chicago, Illinois&#34;, &#34;postcode&#34;: &#34;60647&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 26, &#34;name&#34;: &#34;Hatch Green Chile Bacon Burger&#34;, &#34;restaurant&#34;: &#34;Whataburger&#34;, &#34;web&#34;: &#34;www.whataburger.com&#34;, &#34;description&#34;: &#34;burger with hatch green chiles, bacon and cheese&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheese&#34;, &#34;bacon&#34;, &#34;hatch green chiles&#34;, &#34;mayonnaise&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;984&#34;, &#34;line1&#34;: &#34;388 E Stacy Rd&#34;, &#34;line2&#34;: &#34;Allen, TX&#34;, &#34;postcode&#34;: &#34;75002&#34;, &#34;country&#34;: &#34;USA&#34; } ] }, { &#34;id&#34;: 27, &#34;name&#34;: &#34;The Street Burgers and Coctail Bar Prague 1&#34;, &#34;restaurant&#34;: &#34;The Street&#34;, &#34;web&#34;: &#34;www.thestreet.cz&#34;, &#34;description&#34;: &#34;American, Bar, International, European, Vegetarian Friendly&#34;, &#34;ingredients&#34;: [ &#34;beef&#34;, &#34;cheddar cheese&#34;, &#34;blue cheese&#34;, &#34;onion&#34;, &#34;mozzarella&#34;, &#34;bacon&#34;, &#34;lettuce&#34; ], &#34;addresses&#34;: [ { &#34;addressId&#34;: 0, &#34;number&#34;: &#34;11&#34;, &#34;line1&#34;: &#34;Konviktska&#34;, &#34;line2&#34;: &#34;Prague&#34;, &#34;postcode&#34;: &#34;110 00&#34;, &#34;country&#34;: &#34;The Czech Republic&#34; } ] } ] .",
            "url": "https://nope1013.github.io/firstrepo/week%207/2022/10/10/spotifyAPI.html",
            "relUrl": "/week%207/2022/10/10/spotifyAPI.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) # print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://nope1013.github.io/firstrepo/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Big Idea 1 'Identifying and Correcting Errors'",
            "content": "College Board Big Idea 1 . Identifying and Correcting Errors (Unit 1.4) . Become familiar with types of errors and strategies to fixing them . Lightly Review Videos and take notes on topics with Blog | Complete assigned MCQ questions | . Here are some code segments you can practice fixing: . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . The intended outcome is to determine where the letter is in the alphabet using a while loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . The intended outcome is to determine where the letter is in the alphabet using a for loop . What is a good test case to check the current outcome? Why? | Make changes to get the intended outcome. | . letter = input(&quot;What letter would you like to check?&quot;) for i in alphabetList: count = 0 if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . This code outputs the even numbers from 0 - 10 using a while loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a while loop. . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . This code outputs the even numbers from 0 - 10 using a for loop. . Analyze this code to determine what can be changed to get the outcome to be odd numbers. (Code block below) | . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . This code should output the odd numbers from 0 - 10 using a for loop. . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . The intended outcome is printing a number between 1 and 100 once, if it is a multiple of 2 or 5 . What values are outputted incorrectly. Why? | Make changes to get the intended outcome. | . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) del newNumbers[0] print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Challenge . This code segment is at a very early stage of implementation. . What are some ways to (user) error proof this code? | The code should be able to calculate the cost of the meal of the user | . Hint: . write a “single” test describing an expectation of the program of the program | test - input burger, expect output of burger price | run the test, which should fail because the program lacks that feature | write “just enough” code, the simplest possible, to make the test pass | . Then repeat this process until you get program working like you want it to work. . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;cake&quot;: 2.55, &quot;salad&quot;: 3.25, &quot;hotdog&quot;: 2.75, &quot;beans&quot;: 300.00} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #code should prompts the user multiple times, until they type &quot;Done&quot; while True: item = input(&quot;What would you like to order? Type &#39;Done&#39; when complete&quot;) if item == &quot;Done&quot; : break elif item in menu: total += menu[item] else: print (&quot;That&#39;s not on the menu...&quot;) #code adds price of the menu items selected by the user print(&quot;Your total is: $&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 cake $2.55 salad $3.25 hotdog $2.75 beans $300.0 That&#39;s not on the menu... Your total is: $306.79 . Hacks . Now is a good time to think about Testing of your teams final project... . What errors may arise in your project? | What are some test cases that can be used? | Make sure to document any bugs you encounter and how you solved the problem. | What are “single” tests that you will perform on your project? Or, your part of the project? As Hack Design and Test plan action … Divide these “single” tests into Issues for Scrum Board prior to coding. FYI, related tests could be in same Issue by using markdown checkboxes to separate tests. | . | .",
            "url": "https://nope1013.github.io/firstrepo/collegeboard/error",
            "relUrl": "/collegeboard/error",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Cb Prgm Dsgn",
            "content": "",
            "url": "https://nope1013.github.io/firstrepo/2022/09/26/CB-prgm-dsgn.html",
            "relUrl": "/2022/09/26/CB-prgm-dsgn.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Noor's Personal Flask Page",
            "content": "Noor’s Personal Flask Page . . Link to Flask Page .",
            "url": "https://nope1013.github.io/firstrepo/week%205/2022/09/24/prsnlflsk.html",
            "relUrl": "/week%205/2022/09/24/prsnlflsk.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Attempting to change the background of my Flask portfolio",
            "content": "Attempting to change the background of my Flask portfolio . . . . . I attempted to use Vanta to alter the background from birds to a custom-colored fog, but was unsuccessful. I believe that it is important to blog my failures (I do this quite a lot) as well as my successes because it prevents me from making the same mistakes and allows me to report to my scrum team. .",
            "url": "https://nope1013.github.io/firstrepo/week%205/2022/09/24/flsk-bckgrnd-attmpt.html",
            "relUrl": "/week%205/2022/09/24/flsk-bckgrnd-attmpt.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Mortagascar",
            "content": "Applab: Mortagascar . Play Mortagascar . Mortagascar Plan .",
            "url": "https://nope1013.github.io/firstrepo/week%203/2022/09/12/mortagascar.html",
            "relUrl": "/week%203/2022/09/12/mortagascar.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Creative Performance Task Scrum Board",
            "content": "Ideas for Performance Task: . Guess that song | Matching the song to the artist | Finish the lyric 🌟 | . Functions we want to include / What we need to learn: . Providing a score | Error message | Implementing an if/else to avoid having to repeat code for correct/incorrect answers | . Rubric Row To do Doing Done Notes . 1, Program Purpose and Function | x | x | x |   | . 2, Data Abstraction | x | x | x |   | . 3, Managing Complexity | x | x | x |   | . 4, Procedural Abstraction | x | x | x |   | . 5, Algorithm Implementation | x | x | x |   | . 6, Testing | x | x | x |   | .",
            "url": "https://nope1013.github.io/firstrepo/performance%20task/2022/09/12/creativeperfscrumboard.html",
            "relUrl": "/performance%20task/2022/09/12/creativeperfscrumboard.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Applab Plan (1)",
            "content": "Plan for AppLab . Goals: . A quiz that begins with something fun and then transitions into computer science . | Displaying a score at the end . | Learning more about code functions, connecting this to terms learned in class . | . What I learned: . When text is turned into blocks, it becomes much easier to see what is the code is doing . | “console.log[message]” allows the computer to log key functions in a sequence . | Coding can get very very repetitive when you cannot use loop functions, had to do a lot of copy-pasting . | How to use variable functions . | . Things I wish I could do: . Found an “if/else” block which would have been very effective for wrong/right answers but it was not compatible with the UI controls . | . Things I am proud of: . The background music . | Recognizing data abstraction . | Balancing fun and productivity (both fun and class-oriented questions) . | Adding a scoring function after much trial and error . | . Mortagascar Code: . var score = 0; . setScreen(“welcometomortagascar”); . playSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”, true); . onEvent(“arrow”, “click”, function( ) { . console.log(“Arrow Clicked”); . setScreen(“moveit!”); . }); . onEvent(“moveitbutton”, “click”, function( ) { . console.log(“Start Button Clicked”); . setScreen(“question1”); . }); . onEvent(“king”, “click”, function( ) { . console.log(“King Julien Clicked”); . score = score + 1; . setScreen(“celebrationtime”); . onEvent(“celebrationtime”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“alex”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“maurice”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“kowalski”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question2”); . }); . }); . onEvent(“shark”, “click”, function( ) { . console.log(“shark Clicked”); . score = score + 1; . setScreen(“celebrationtime”); . onEvent(“celebrationtime”, “click”, function( ) { . setScreen(“question3”); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . playSound(“Windows-XP.mp3”, true); . }); . }); . onEvent(“cat”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“snake”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“mouse”, “click”, function( ) { . setScreen(“wompwomp”); . onEvent(“goback”, “click”, function( ) { . setScreen(“question3”); . playSound(“Windows-XP.mp3”, true); . stopSound(“https://ia802701.us.archive.org/24/items/MadagascarILikeToMoveIt/LetsMovingOsa_64kb.mp3”); . }); . }); . onEvent(“morton”, “click”, function( ) { . console.log(“Run Clicked”); . setScreen(“q3fr”); . stopSound(“Windows-XP.mp3”); . }); . onEvent(“da”, “click”, function( ) { . console.log(“Data Abstraction Clicked”); . score = score + 1; . setScreen(“correct”); . onEvent(“correct”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“id”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“aa”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“button3”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q4”); . }); . }); . onEvent(“si”, “click”, function( ) { . console.log(“Yes clicked”); . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“q5”); . }); . }); . onEvent(“no”, “click”, function( ) { . console.log(“No clicked”); . score = score + 1; . setScreen(“correct”); . onEvent(“correct”, “click”, function( ) { . setScreen(“q5”); . }); . }); . onEvent(“khan”, “click”, function( ) { . console.log(“Khan Academy Clicked”); . score = score + 1; . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . onEvent(“Dropping”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); . onEvent(“notes”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); . onEvent(“pracq”, “click”, function( ) { . setScreen(“error”); . onEvent(“error”, “click”, function( ) { . setScreen(“mortibrate”); . playSound(“sound://category_achievements/melodic_win_10.mp3”, true); . onEvent(“res”, “click”, function( ) { . setText(“yayyyy”, (“Your score is” + score) + “/5”); . }); . }); . }); .",
            "url": "https://nope1013.github.io/firstrepo/2022/09/11/AppLab-Plan-(1).html",
            "relUrl": "/2022/09/11/AppLab-Plan-(1).html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "JavaScript Tutorial",
            "content": "console.log output . Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. . The command or function is console.log() | &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. | &quot;Hello, World&quot; is a parameter to the console.log command. | The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. | Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser. | . console.log(&quot;Hello, World!&quot;); . Running cells with &#39;Python 2.7.18 64-bit&#39; requires ipykernel package. Run the following command to install &#39;ipykernel&#39; into the Python environment. Command: &#39;/bin/python2 -m pip install ipykernel -U --user --force-reinstall&#39; . console.log output showing use of variable . This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. . The variable &quot;var msg =&quot; is used to capture the data | The console.log(msg) outputs to console | . var msg = &quot;Hello, World!&quot;; console.log(msg); . console.log output showing use of a function . This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. . There are two steps in the code, the definition of the function and the call to the function. &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. | &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. | . | Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function. | . function logIt(output) { console.log(output); } logIt(msg); . Showing reuse of a function . Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. . First call sends a different string message | Second call sends a number | . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Dynamic or Loosely typed language (string, number) . JavaScript is a loosely typed language, meaning you don&#39;t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Build a Person Function/Class object and JSON . JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. . Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. | Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. | Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;. | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . Build a Classroom Array/List of Persons and JSON . Many key elements are shown again. New elements include... . Building an Array, &quot;var students&quot; is an array of many persons | Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages. | . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2022), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2023), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2023), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2023), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2023), new Person(&quot;Noor&quot;, &quot;Nope1013&quot;, 2023), new Person(&quot;Sanika&quot;, &quot;sanikasha&quot;, 2023), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter $$.html which renders output similarly to a real website. . JavaScript in the _toHTML method is broken into three parts... Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . | The last line in the example $$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); .",
            "url": "https://nope1013.github.io/firstrepo/techtalk/javascript",
            "relUrl": "/techtalk/javascript",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Cb Program Fn",
            "content": "",
            "url": "https://nope1013.github.io/firstrepo/2022/09/04/CB-program-fn.html",
            "relUrl": "/2022/09/04/CB-program-fn.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Cb Collab",
            "content": "",
            "url": "https://nope1013.github.io/firstrepo/2022/09/04/CB-collab.html",
            "relUrl": "/2022/09/04/CB-collab.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Changing the theme of my blog",
            "content": "Changing the theme of my blog . Screen captures using the remote theme “hacker” . . . . I noticed that my pages had gone missing, and when I changed it back, the same issue prevailed. After checking with my pair, tablemates, and finally Mr. Mortensen, I realized the error after changing it back was misspelling “minima” as “mimima.” Embarrassing. I learned how to find commit history, however. .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/31/Theme-change.html",
            "relUrl": "/week%202/2022/08/31/Theme-change.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Reversing Lists and Dictionaries",
            "content": ". toc: true layout: post categories: [week 2] . title: Reversing Lists and Dictionaries . InfoDb = [] # Append to List a Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;4S Ranch&quot;, &quot;Email&quot;: &quot;noorkg05@gmail.com&quot;, &quot;Car&quot;: &quot;2012-Mazda CX9&quot;, &quot;Owns Dogs&quot;: [&quot;Luna&quot;, &quot;Kahlua&quot;, &quot;Daisy&quot;], &quot;Owns Cats&quot;: [&quot;Merlot&quot;, &quot;Smeagol&quot;], &quot;Favorite Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - The Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sanika&quot;, &quot;LastName&quot;: &quot;Shahapurkar&quot;, &quot;DOB&quot;: &quot;September 29&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;sanika.shahapurkar@gmail.com&quot;, &quot;Car&quot;: &quot;2018-BMW 430i&quot;, &quot;Owns Dogs&quot;: [&quot;Striver&quot;], &quot;Owns Cats&quot;: [&quot;none:(&quot;], &quot;Favorite Songs&quot;: [&quot;Someone New - Hozier&quot;, &quot;Marvelous - Wallows&quot;, &quot;Saggitarius Superstar - Coin &amp; Faye Webster&quot;] }) InfoDb.reverse() print(&#39;Reversed List:&#39;, InfoDb) # Print the data structure print(InfoDb) . Reversed List: [{&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}] [{&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Dogs: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Dogs&quot;])) print(&quot; t&quot;, &quot;Cats: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Cats&quot;])) print(&quot; t&quot;, &quot;Favorite Songs:&quot;, d_rec[&quot;Favorite Songs&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) print(&#39;Reversed List:&#39;, print_data) for_loop() . Reversed List: &lt;function print_data at 0x7f2be8159c10&gt; For loop output Sanika Shahapurkar Residence: Del Sur Birthday: September 29 Dogs: Striver Cats: none:( Favorite Songs: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;] Noor Grewal Residence: 4S Ranch Birthday: October 27 Dogs: Luna, Kahlua, Daisy Cats: Merlot, Smeagol Favorite Songs: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;] .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/30/listndictreverse.html",
            "relUrl": "/2022/08/30/listndictreverse.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Practicing with Lists and Dictionaries",
            "content": ". toc: true layout: post categories: [week 2] . title: Practicing with Lists and Dictionaries . InfoDb = [] # Append to List a Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;4S ranch&quot;, &quot;Email&quot;: &quot;noorkg05@gmail.com&quot;, &quot;Car&quot;: &quot;2012-Mazda CX9&quot;, &quot;Owns Dogs&quot;: [&quot;Luna&quot;, &quot;Kahlua&quot;, &quot;Daisy&quot;], &quot;Owns Cats&quot;: [&quot;Merlot&quot;, &quot;Smeagol&quot;], &quot;Favorite Songs&quot;: [&quot;Wasting Love - Iron Maiden&quot;, &quot;Tear - The Smashing Pumpkins&quot;, &quot;Everlong - Foo Fighters&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sanika&quot;, &quot;LastName&quot;: &quot;Shahapurkar&quot;, &quot;DOB&quot;: &quot;September 29&quot;, &quot;Residence&quot;: &quot;Del Sur&quot;, &quot;Email&quot;: &quot;sanika.shahapurkar@gmail.com&quot;, &quot;Car&quot;: &quot;2018-BMW 430i&quot;, &quot;Owns Dogs&quot;: [&quot;Striver&quot;], &quot;Owns Cats&quot;: [&quot;none:(&quot;], &quot;Favorite Songs&quot;: [&quot;Someone New - Hozier&quot;, &quot;Marvelous - Wallows&quot;, &quot;Saggitarius Superstar - Coin &amp; Faye Webster&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;4S Ranch&#39;, &#39;Email&#39;: &#39;noorkg05@gmail.com&#39;, &#39;Car&#39;: &#39;2012-Mazda CX9&#39;, &#39;Owns Dogs&#39;: [&#39;Luna&#39;, &#39;Kahlua&#39;, &#39;Daisy&#39;], &#39;Owns Cats&#39;: [&#39;Merlot&#39;, &#39;Smeagol&#39;], &#39;Favorite Songs&#39;: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;]}, {&#39;FirstName&#39;: &#39;Sanika&#39;, &#39;LastName&#39;: &#39;Shahapurkar&#39;, &#39;DOB&#39;: &#39;September 29&#39;, &#39;Residence&#39;: &#39;Del Sur&#39;, &#39;Email&#39;: &#39;sanika.shahapurkar@gmail.com&#39;, &#39;Car&#39;: &#39;2018-BMW 430i&#39;, &#39;Owns Dogs&#39;: [&#39;Striver&#39;], &#39;Owns Cats&#39;: [&#39;none:(&#39;], &#39;Favorite Songs&#39;: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) print(&quot; t&quot;, &quot;Birthday:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Dogs: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Dogs&quot;])) print(&quot; t&quot;, &quot;Cats: &quot;, end=&quot;&quot;) print(&quot;, &quot;.join(d_rec[&quot;Owns Cats&quot;])) print(&quot; t&quot;, &quot;Favorite Songs:&quot;, d_rec[&quot;Favorite Songs&quot;]) # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Noor Grewal Residence: 4S Ranch Birthday: October 27 Dogs: Luna, Kahlua, Daisy Cats: Merlot, Smeagol Favorite Songs: [&#39;Wasting Love - Iron Maiden&#39;, &#39;Tear - The Smashing Pumpkins&#39;, &#39;Everlong - Foo Fighters&#39;] Sanika Shahapurkar Residence: Del Sur Birthday: September 29 Dogs: Striver Cats: none:( Favorite Songs: [&#39;Someone New - Hozier&#39;, &#39;Marvelous - Wallows&#39;, &#39;Saggitarius Superstar - Coin &amp; Faye Webster&#39;] .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/30/listndict.html",
            "relUrl": "/2022/08/30/listndict.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Python Quiz",
            "content": ". toc: true layout: notebook categories: [week 1] . title: Python Quiz . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) questions = 5 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Which fuction turns number into string?&quot;) if rsp == &quot;str()&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) rsp = question_with_response(&quot;Who is the best CS teacher?&quot;) if rsp == &quot;Mr Mortensen&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect...&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, nope1013 running /bin/python3 You will be asked 5 questions. Question: Are you ready to take a test? Answer: no Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Which fuction turns number into string? () is incorrect... Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? if is correct! Question: Who is the best CS teacher? if is incorrect... nope1013 you scored 3/5 .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/29/quiz.html",
            "relUrl": "/2022/08/29/quiz.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Extremely Fun Calculator",
            "content": "# Addition def add(x, y): return x + y # Subtraction def subtract(x, y): return x - y # Multiplication def multiply(x, y): return x * y # Division def divide(x, y): return x / y print(&quot;Time for everyone&#39;s favorite subject! Select operation.&quot;) print(&quot;1.Add&quot;) print(&quot;2.Subtract&quot;) print(&quot;3.Multiply&quot;) print(&quot;4.Divide&quot;) while True: # take input from the user choice = input(&quot;Tough choice...choose your operation. Don&#39;t sweat it or you&#39;ll regret it! (1/2/3/4): &quot;) # check if choice is one of the four options if choice in (&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;): num1 = float(input(&quot;What is your first number?: &quot;)) num2 = float(input(&quot;Enter second number: &quot;)) if choice == &#39;1&#39;: print(num1, &quot;+&quot;, num2, &quot;=&quot;, add(num1, num2)) elif choice == &#39;2&#39;: print(num1, &quot;-&quot;, num2, &quot;=&quot;, subtract(num1, num2)) elif choice == &#39;3&#39;: print(num1, &quot;*&quot;, num2, &quot;=&quot;, multiply(num1, num2)) elif choice == &#39;4&#39;: print(num1, &quot;/&quot;, num2, &quot;=&quot;, divide(num1, num2)) next_calculation = input(&quot;Did you have fun? Want to try another one? (yes/no): &quot;) if next_calculation == &quot;no&quot;: break else: print(&quot;Something went wrong. That&#39;s not fun&quot;) . Time for everyone&#39;s favorite subject! Select operation. 1.Add 2.Subtract 3.Multiply 4.Divide 1534.0 + 4928.0 = 6462.0 9000.0 - 2948.0 = 6052.0 14.0 * 924.0 = 12936.0 900.0 / 30.0 = 30.0 .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/29/calc.html",
            "relUrl": "/week%202/2022/08/29/calc.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "Lists and Dictionaries . As a quick review we used variables in the introduction last week. Variables all have a type: Strings, Integer, Float, List and Dictionary are some key types. In Python, variables are given a type at assignment, Types are important to understand and will impact operations, as we saw when we were required to user str() function in concatenation. . Developers often think of variables as primitives or collections. Look at this example and see if you can see hypothesize the difference between a primitive and a collection. | Take a minute and see if you can reference other elements in the list or other keys in the dictionary. Show output. | # variable of type string name = &quot;Noor Grewal&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 17 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Noor Grewal &lt;class &#39;str&#39;&gt; age 17 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; - langs[3] Bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Noor Grewal&#39;, &#39;age&#39;: 17, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] Noor Grewal &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being build on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will collect many instances of that pattern. . List is used to collect many | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration we will explore constructing a List of people and cars. . As we learned above, List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list | In the example below, the expression appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries. The output looks similar to JSON and we will see this often, you will be required to understand this data structure and understand the parts. Easy peasy ;). | . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 3rd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Noor&quot;, &quot;LastName&quot;: &quot;Grewal&quot;, &quot;DOB&quot;: &quot;October 27&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;noorg60381@stu.powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;Mazda cX9&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Noor&#39;, &#39;LastName&#39;: &#39;Grewal&#39;, &#39;DOB&#39;: &#39;October 27&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;noorg60381@stu.powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;Mazda cX9&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Noor Grewal Residence: San Diego Birth Day: October 27 Cars: Mazda cX9 . Hacks . Add a couple of records to the InfoDb | Try to do a for loop with an index | Pair Share code somethings creative or unique, with loops and data. Hints... Would it be possible to output data in a reverse order? | Are there other methods that can be performed on lists? | Could you create new or add to dictionary data set? Could you do it with input? | Make a quiz that stores in a List of Dictionaries. | . | .",
            "url": "https://nope1013.github.io/firstrepo/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Installation Checks",
            "content": "Python Checks . python --version python2 --version . Python 3.9.12 bash: python2: command not found . . Conda Packages . conda list . # packages in environment at /Users/johnmortensen/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.2.0 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 interchange 2021.0.4 pypi_0 pypi intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython-cypher 0.2.6 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 monotonic 1.6 pypi_0 pypi mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 neo4jrestclient 2.1.1 pypi_0 pypi neo4jupyter 0.2.0 pypi_0 pypi nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 pansi 2020.7.3 pypi_0 pypi param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prettytable 3.3.0 pypi_0 pypi prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 py2neo 2021.2.3 pypi_0 pypi pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: java /Users/johnmortensen/Library/Jupyter/kernels/java javascript /Users/johnmortensen/Library/Jupyter/kernels/javascript python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/johnmortensen/opt/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://nope1013.github.io/firstrepo/techtalk/bash_checks",
            "relUrl": "/techtalk/bash_checks",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Pope On Demand",
            "content": "Noor Grewal . DaFoe . APEL . 19 January 2022 . Pope On-Demand . Making mistakes is a fundamental part of the human experience. Everybody has made a mistake, whether consequential or insignificant, at some point in their life. Thus, making mistakes is easy, but forgiving those mistakes often is not. Alexander Pope, in his long poem An Essay on Criticism, wrote that making mistakes is human, however forgiving those mistakes is “divine.” Forgiveness does not usually come easy, and is seen by Pope as something holy, something that should not be taken for granted, because it is a second chance. This can be a shot at redemption for the errors that every person makes, but it can also result in horrible consequences when gifted to the wrong person. While I agree with Pope that the divinity of forgiveness for human mistakes can lead to progression when those people who have erred want to contribute to society, some people who make mistakes are beyond saving, and giving them a second chance can have ruinous consequences. . Primarily, second chances can allow people who have a purpose to help society to redeem themselves after making mistakes, and continue to serve society in a beneficial way. Many popular musicians and influencers have been subject to the phenomenon of “cancel culture,” in which their past or present mistakes are exposed to the media world, and their content is essentially boycotted. Examples include artists such as Billie Eilish, Doja Cat, and Lil Nas X, all of whom have been put in the spotlight on social media platforms for harmful or insensitive tweets. These people have made human mistakes like misreading situations or bringing down other people via the internet in their youth, and were given a second chance due to the reach of the music that they make. People are polarized on these issues, therefore some granted the artists the second chance to continue making their music, and all have progressed since then. Billie Eilish has millions of streamers who are touched by her emotional content, and able to relate to her, despite the fact that she has offended people in the past. She was given a second chance. Doja Cat is celebrated for her stage presence and empowering music, despite the fact that she has tweeted slurs in the past. She was given a second chance. Lil Nas X is one of the most popular rappers at the moment, and brings awareness to LGBT rights, despite the fact that he has attacked people online in the past. He was given a second chance. All of these artists made mistakes, were forgiven, and now serve society in positive ways today. Additionally, second chances can serve society by bringing closure to the families of victims of previously unsolved crimes. In many cold cases from before forensic technologies, the Los Angeles Police Department was prone to making mistakes in identifying the victims and perpetrators of vicious murders, taking days to find enough evidence to compile a case. Those days soon became weeks, which became months, which became years, which led to boxes and boxes of cold cases, or unsolved murders. However, when forensic technology was invented, the LAPD was given a second chance at the cases that had physical evidence, and cold cases from decades ago are still being solved today. This is an example of an entire section of our society, the police department, that was given a second chance through science, and which is thus able to serve society better, making less of the mistakes it did in the past. Even influential historical figures such as presidents have made terrible mistakes. George Washington, the first president of the United States, led his troops into a massacre when he gained commanding status. Despite this tragic mistake, he was given a second chance in the American Revolution, and was able to help the country gain independence from British tyranny. This was beneficial because even though his mistake cost lives, Washington the fact that he had made one, and that he was not a deliberate murderer. He had the goal to liberate his country from oppression, and to benefit society, so when he was forgiven, he carried out that original goal without making the same mistake. Second chances, when given to people who want to help society progress, can be extremely beneficial, because these people have the mindset to create positive change. . However, some people do not acknowledge the mistakes that they have made, and should not deserve a second chance because they will simply make those mistakes again. There are thousands of plots of books, movies, and television shows where the hero gives the villain a second chance, only to be double-crossed or to see them make the same “mistake.” A prominent example is in the Marvel show Daredevil, where the main character is a lawyer named Matt Murdock by day, and a crime-fighting vigilante named “Daredevil” by night. His main enemy is Wilson Fisk, a man who controls almost all of New York through corruption and terror. Fisk goes against Murdock in the law world and the crime world, and makes the mistakes of killing people close to him. When Murdock finally is able to get the upper hand on Fisk, he spares him instead of killing him, offering him forgiveness and a second chance at living a more honest life. Murdock, like Pope, acknowledges that humans make mistakes and that forgiveness is divine. The problem, however, is that Fisk is an example of a person who believes that his mistakes are acceptable actions, and who does not view murder and corruption as bad if it is benefitting him. As a result, Murdock’s forgiveness enables Fisk to escape prison and continue to corrupt and kill innocent people. When somebody does not wish to benefit society, their mistakes are often unforgivable, as giving them a second chance will only let them make more of these mistakes. Hypothetically, if a rapist was caught, tried, and arrested for their crime, they might serve their time, be on parole, and eventually be offered a second chance at living a morally better life and preventing their mistakes from happening again. If they realized the gravity of their actions and how they were harmful, giving them a second chance could be beneficial, as they may want to prevent others from doing what they did, bettering society. On the other hand, in a situation such as the tragic San Diego murders of Amber Dubois and Chelsea King, if the perpetrator does not believe that their actions are wrong, a second chance is just ruinous. Amber Dubois and Chelsea King were subject to the horrible actions of the same man, and he stated on record (after he was finally caught) that he would have simply kept committing atrocities if he was released from prison. He was an example of someone who should not be granted a second chance, as he sought to hurt society and innocent people, not to better it. When a person has a destructive motive or purpose in life, a second chance will allow them to continue fulfilling that purpose and making the same mistakes. . Forgiveness in the form of a second chance is therefore worth granting when the person who has erred is aware of their mistakes, and wants to redeem themselves by helping society progress positively. It is not worth granting to those who have ignoble motives and who do not treat their mistakes as such, because the historical outcome is that they continue to make them, hurting society and its people. While making mistakes is human, forgiving somebody is divine, and forgiveness should thus be granted in the correct situations and treated as something holy. .",
            "url": "https://nope1013.github.io/firstrepo/2022/08/24/Pope-On-Demand.html",
            "relUrl": "/2022/08/24/Pope-On-Demand.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Noor's Current Favorite Songs",
            "content": "Noor’s Current Favorite Songs . . Not ranked in any specific order | Not in any specific category | Constantly subject to change, as music is… | . . “Comedown” by Bush | “Everlong” by the Foo Fighters | “Tear” by the Smashing Pumpkins | “Twilight” by bôa | “Wasting Love” by Iron Maiden | “Me and Your Mama” by Childish Gambino | “Short Change Hero” by the Heavy | “It’s My Life” by No Doubt | “Hail, Hail” by Pearl Jam | “Time is Running Out” by Muse |",
            "url": "https://nope1013.github.io/firstrepo/week%200/2022/08/22/CURRENT-FAV-SONGS.html",
            "relUrl": "/week%200/2022/08/22/CURRENT-FAV-SONGS.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Original Notebook",
            "content": "print(&#39;Hello Mr M!!!&#39;) . Hello Mr M!!! .",
            "url": "https://nope1013.github.io/firstrepo/week%202/2022/08/22/new-nb.html",
            "relUrl": "/week%202/2022/08/22/new-nb.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | .",
            "url": "https://nope1013.github.io/firstrepo/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of the capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://nope1013.github.io/firstrepo/week%200/2020/02/20/test.html",
            "relUrl": "/week%200/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Schedule",
          "content": "Trimester 1 - Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint AP Test Prep Career Tech Canvas . 3 | Creative Development | Create Performance Task, How I got a 5! | JavaScript Tutorial, Program Design with AppLab | TBD | . 2 | Data Abstraction | Python Lists and Dictionaries | Agile and Roles, HTML Fragments and Layouts | TBD | . 1 | Introduction to Python | Hello to Python, Reflections on Computer Science | Bash and Checks, Fastpages, Jupyter Notebooks, Markdown, Focus and Habits | Intro Python, Jupyter, Fastpages | . 0 | Tool Setup | Scoring History, Pseudo Code | Tools and Equipment | Tools Setup | .",
          "url": "https://nope1013.github.io/firstrepo/schedule",
          "relUrl": "/schedule",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "About Me",
          "content": "Noor Grewal is a senior at Del Norte who loves art, baking, and recently, coding! 😎 .",
          "url": "https://nope1013.github.io/firstrepo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "My Gallery",
          "content": "Here are some of my recent art projects! To view more, check out my instagram 🎨🖌️ . . .",
          "url": "https://nope1013.github.io/firstrepo/gallery/",
          "relUrl": "/gallery/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "Vocab Pseudocode Python Definition/Purpose . input | DISPLAY(expression) | print(expression, end=” “) | Displays the value of expression, followed by a space. Python defaults to newline, thus the end=” “ | . output | a ← INPUT() | a = input(prompt) | Accepts a value from the user and returns it to the variable a | . selection | IF (expression) | if expression: | run commands in the code block associated with the selection | . iteration expression | a ← expression REPEAT UNTIL (expression) | while expression: | Repeat commands in the code block associated withe the iteration while expression is true | . iteration n times | REPEAT n TIMES | for i in range(n): | Repeat commands in the code block associated withe the iteration n times | . list assignment | list ← [expression1, expression2, expression3] | list = [expression1, expression2, expression3] | Assigns 3 values to list, value can be literal or expressions | . first index in list | list[1] | list[0] | Access the 1st element in the list[]. FYI, most programming languages start at zero | . last index in list | list[LENGTH(list)] | list[len(list) - 1] | Access the last element in the list[]. If you start at zero, last element is length - 1. | . define procedure | PROCEDURE name (parameter) | def name(parameter): | Create a procedure containing a sequence of programming instructions | . expression equals | a = b | a == b | Evaluate if assigned value of a equals assigned value of b | . expression does not equal | a ≠ b | a != b | Evaluate if assigned value of a is NOT equal to assigned value of b | . LINK | - | - | Collegeboard Pseudocode Reference | . Github | - | - | The defacto hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere in the world. Think of it as the Google Docs for Coders. | . Visual Studio Code | - | - | Allows you to Edit files, Build your Code, and Pull/Push Code from and to the GitHub | . Jupyter Notebooks | - | - | A document format for creating and sharing computational documents. These documents allow you to compute segments of Python or Java code as you are taking notes. (.ipynb | . print | - | print() | Prints a message through Python | . sequence | - | - | Two or more lines of code | . List | - | square brackets [] | A way of grouping data in an ordered sequence, and will be a big part of the requirement for the College Board Create Task project | . Dictionary | - | curly braces {} | A way of grouping data into in key-value relationships | . Keys | dict.keys() | - | Expresses the value | . Values | dict.values() | - | Value corresponds with the keys in a list or dictionary | . API | - | - | a set of functions and procedures allowing the creation of applications that access the features or data of an operating system, application, or other service | . rapidAPI | - | - | a site that offers multiple APIs for our use | . AWS | - | - | Subsidiary of Amazon that provides on-demand cloud computing platforms and APIs to individuals, companies, and governments, on a metered pay-as-you-go basis | .",
          "url": "https://nope1013.github.io/firstrepo/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://nope1013.github.io/firstrepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}